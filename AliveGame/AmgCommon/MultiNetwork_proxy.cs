




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;

namespace MultiC2S
{
	internal class Proxy:Nettention.Proud.RmiProxy
	{
public bool RequestServerIn(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.RequestServerIn;
		__msg.Write(__msgid);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_RequestServerIn, Common.RequestServerIn);
}

public bool RequestServerIn(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.RequestServerIn;
__msg.Write(__msgid);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_RequestServerIn, Common.RequestServerIn);
}
public bool RequestLogin(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String id, System.String password)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.RequestLogin;
		__msg.Write(__msgid);
		AmgClient.Marshaler.Write(__msg, id);
		AmgClient.Marshaler.Write(__msg, password);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_RequestLogin, Common.RequestLogin);
}

public bool RequestLogin(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String id, System.String password)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.RequestLogin;
__msg.Write(__msgid);
AmgClient.Marshaler.Write(__msg, id);
AmgClient.Marshaler.Write(__msg, password);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_RequestLogin, Common.RequestLogin);
}
public bool RequestRoomList(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.RequestRoomList;
		__msg.Write(__msgid);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_RequestRoomList, Common.RequestRoomList);
}

public bool RequestRoomList(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.RequestRoomList;
__msg.Write(__msgid);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_RequestRoomList, Common.RequestRoomList);
}
public bool RequestInRoom(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String roomName, bool isNewRoom, System.String id)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.RequestInRoom;
		__msg.Write(__msgid);
		AmgClient.Marshaler.Write(__msg, roomName);
		AmgClient.Marshaler.Write(__msg, isNewRoom);
		AmgClient.Marshaler.Write(__msg, id);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_RequestInRoom, Common.RequestInRoom);
}

public bool RequestInRoom(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, String roomName, bool isNewRoom, System.String id)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.RequestInRoom;
__msg.Write(__msgid);
AmgClient.Marshaler.Write(__msg, roomName);
AmgClient.Marshaler.Write(__msg, isNewRoom);
AmgClient.Marshaler.Write(__msg, id);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_RequestInRoom, Common.RequestInRoom);
}
public bool RequestFastRoom(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String id)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.RequestFastRoom;
		__msg.Write(__msgid);
		AmgClient.Marshaler.Write(__msg, id);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_RequestFastRoom, Common.RequestFastRoom);
}

public bool RequestFastRoom(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String id)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.RequestFastRoom;
__msg.Write(__msgid);
AmgClient.Marshaler.Write(__msg, id);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_RequestFastRoom, Common.RequestFastRoom);
}
public bool RequestInGame(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String roomName)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.RequestInGame;
		__msg.Write(__msgid);
		AmgClient.Marshaler.Write(__msg, roomName);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_RequestInGame, Common.RequestInGame);
}

public bool RequestInGame(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, String roomName)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.RequestInGame;
__msg.Write(__msgid);
AmgClient.Marshaler.Write(__msg, roomName);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_RequestInGame, Common.RequestInGame);
}
public bool JoinGameScene(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, float x, float y, float z, float angle, int animNum)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.JoinGameScene;
		__msg.Write(__msgid);
		AmgClient.Marshaler.Write(__msg, x);
		AmgClient.Marshaler.Write(__msg, y);
		AmgClient.Marshaler.Write(__msg, z);
		AmgClient.Marshaler.Write(__msg, angle);
		AmgClient.Marshaler.Write(__msg, animNum);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_JoinGameScene, Common.JoinGameScene);
}

public bool JoinGameScene(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, float x, float y, float z, float angle, int animNum)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.JoinGameScene;
__msg.Write(__msgid);
AmgClient.Marshaler.Write(__msg, x);
AmgClient.Marshaler.Write(__msg, y);
AmgClient.Marshaler.Write(__msg, z);
AmgClient.Marshaler.Write(__msg, angle);
AmgClient.Marshaler.Write(__msg, animNum);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_JoinGameScene, Common.JoinGameScene);
}
public bool Player_SMove(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, float x, float y, float z, float vx, float vy, float vz, float angle, int animNum)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.Player_SMove;
		__msg.Write(__msgid);
		AmgClient.Marshaler.Write(__msg, x);
		AmgClient.Marshaler.Write(__msg, y);
		AmgClient.Marshaler.Write(__msg, z);
		AmgClient.Marshaler.Write(__msg, vx);
		AmgClient.Marshaler.Write(__msg, vy);
		AmgClient.Marshaler.Write(__msg, vz);
		AmgClient.Marshaler.Write(__msg, angle);
		AmgClient.Marshaler.Write(__msg, animNum);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_Player_SMove, Common.Player_SMove);
}

public bool Player_SMove(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, float x, float y, float z, float vx, float vy, float vz, float angle, int animNum)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.Player_SMove;
__msg.Write(__msgid);
AmgClient.Marshaler.Write(__msg, x);
AmgClient.Marshaler.Write(__msg, y);
AmgClient.Marshaler.Write(__msg, z);
AmgClient.Marshaler.Write(__msg, vx);
AmgClient.Marshaler.Write(__msg, vy);
AmgClient.Marshaler.Write(__msg, vz);
AmgClient.Marshaler.Write(__msg, angle);
AmgClient.Marshaler.Write(__msg, animNum);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_Player_SMove, Common.Player_SMove);
}
public bool RequestAddTree(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, UnityEngine.Vector3 position)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.RequestAddTree;
		__msg.Write(__msgid);
		AmgClient.Marshaler.Write(__msg, position);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_RequestAddTree, Common.RequestAddTree);
}

public bool RequestAddTree(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, UnityEngine.Vector3 position)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.RequestAddTree;
__msg.Write(__msgid);
AmgClient.Marshaler.Write(__msg, position);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_RequestAddTree, Common.RequestAddTree);
}
public bool RequestRemoveTree(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int treeID)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.RequestRemoveTree;
		__msg.Write(__msgid);
		AmgClient.Marshaler.Write(__msg, treeID);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_RequestRemoveTree, Common.RequestRemoveTree);
}

public bool RequestRemoveTree(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int treeID)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.RequestRemoveTree;
__msg.Write(__msgid);
AmgClient.Marshaler.Write(__msg, treeID);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_RequestRemoveTree, Common.RequestRemoveTree);
}
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
const string RmiName_RequestServerIn="RequestServerIn";
const string RmiName_RequestLogin="RequestLogin";
const string RmiName_RequestRoomList="RequestRoomList";
const string RmiName_RequestInRoom="RequestInRoom";
const string RmiName_RequestFastRoom="RequestFastRoom";
const string RmiName_RequestInGame="RequestInGame";
const string RmiName_JoinGameScene="JoinGameScene";
const string RmiName_Player_SMove="Player_SMove";
const string RmiName_RequestAddTree="RequestAddTree";
const string RmiName_RequestRemoveTree="RequestRemoveTree";
       
const string RmiName_First = RmiName_RequestServerIn;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
const string RmiName_RequestServerIn="";
const string RmiName_RequestLogin="";
const string RmiName_RequestRoomList="";
const string RmiName_RequestInRoom="";
const string RmiName_RequestFastRoom="";
const string RmiName_RequestInGame="";
const string RmiName_JoinGameScene="";
const string RmiName_Player_SMove="";
const string RmiName_RequestAddTree="";
const string RmiName_RequestRemoveTree="";
       
const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList() { return Common.RmiIDList; } 
	}
}
namespace MultiS2C
{
	internal class Proxy:Nettention.Proud.RmiProxy
	{
public bool ReplyServerIn(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyServerIn;
		__msg.Write(__msgid);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyServerIn, Common.ReplyServerIn);
}

public bool ReplyServerIn(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyServerIn;
__msg.Write(__msgid);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyServerIn, Common.ReplyServerIn);
}
public bool ReplyServerFailed(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String reason)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyServerFailed;
		__msg.Write(__msgid);
		AmgClient.Marshaler.Write(__msg, reason);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyServerFailed, Common.ReplyServerFailed);
}

public bool ReplyServerFailed(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String reason)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyServerFailed;
__msg.Write(__msgid);
AmgClient.Marshaler.Write(__msg, reason);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyServerFailed, Common.ReplyServerFailed);
}
public bool NotifyLoginSuccess(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.NotifyLoginSuccess;
		__msg.Write(__msgid);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_NotifyLoginSuccess, Common.NotifyLoginSuccess);
}

public bool NotifyLoginSuccess(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.NotifyLoginSuccess;
__msg.Write(__msgid);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_NotifyLoginSuccess, Common.NotifyLoginSuccess);
}
public bool NotifyLoginFailed(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String reason)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.NotifyLoginFailed;
		__msg.Write(__msgid);
		AmgClient.Marshaler.Write(__msg, reason);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_NotifyLoginFailed, Common.NotifyLoginFailed);
}

public bool NotifyLoginFailed(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String reason)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.NotifyLoginFailed;
__msg.Write(__msgid);
AmgClient.Marshaler.Write(__msg, reason);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_NotifyLoginFailed, Common.NotifyLoginFailed);
}
public bool ReplyInRoom(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int result, String comment, int choiceCharacter)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyInRoom;
		__msg.Write(__msgid);
		AmgClient.Marshaler.Write(__msg, result);
		AmgClient.Marshaler.Write(__msg, comment);
		AmgClient.Marshaler.Write(__msg, choiceCharacter);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyInRoom, Common.ReplyInRoom);
}

public bool ReplyInRoom(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int result, String comment, int choiceCharacter)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyInRoom;
__msg.Write(__msgid);
AmgClient.Marshaler.Write(__msg, result);
AmgClient.Marshaler.Write(__msg, comment);
AmgClient.Marshaler.Write(__msg, choiceCharacter);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyInRoom, Common.ReplyInRoom);
}
public bool ReplyInGame(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int result, String comment)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyInGame;
		__msg.Write(__msgid);
		AmgClient.Marshaler.Write(__msg, result);
		AmgClient.Marshaler.Write(__msg, comment);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyInGame, Common.ReplyInGame);
}

public bool ReplyInGame(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int result, String comment)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyInGame;
__msg.Write(__msgid);
AmgClient.Marshaler.Write(__msg, result);
AmgClient.Marshaler.Write(__msg, comment);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyInGame, Common.ReplyInGame);
}
public bool NotifyAddTree(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int treeID, UnityEngine.Vector3 position)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.NotifyAddTree;
		__msg.Write(__msgid);
		AmgClient.Marshaler.Write(__msg, treeID);
		AmgClient.Marshaler.Write(__msg, position);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_NotifyAddTree, Common.NotifyAddTree);
}

public bool NotifyAddTree(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int treeID, UnityEngine.Vector3 position)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.NotifyAddTree;
__msg.Write(__msgid);
AmgClient.Marshaler.Write(__msg, treeID);
AmgClient.Marshaler.Write(__msg, position);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_NotifyAddTree, Common.NotifyAddTree);
}
public bool NotifyRemoveTree(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int treeID)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.NotifyRemoveTree;
		__msg.Write(__msgid);
		AmgClient.Marshaler.Write(__msg, treeID);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_NotifyRemoveTree, Common.NotifyRemoveTree);
}

public bool NotifyRemoveTree(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int treeID)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.NotifyRemoveTree;
__msg.Write(__msgid);
AmgClient.Marshaler.Write(__msg, treeID);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_NotifyRemoveTree, Common.NotifyRemoveTree);
}
public bool Player_Appear(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, System.String userID, float x, float y, float z, float vx, float vy, float vz, float angle, int animNum, int choiceCharacter)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.Player_Appear;
		__msg.Write(__msgid);
		AmgClient.Marshaler.Write(__msg, hostID);
		AmgClient.Marshaler.Write(__msg, userID);
		AmgClient.Marshaler.Write(__msg, x);
		AmgClient.Marshaler.Write(__msg, y);
		AmgClient.Marshaler.Write(__msg, z);
		AmgClient.Marshaler.Write(__msg, vx);
		AmgClient.Marshaler.Write(__msg, vy);
		AmgClient.Marshaler.Write(__msg, vz);
		AmgClient.Marshaler.Write(__msg, angle);
		AmgClient.Marshaler.Write(__msg, animNum);
		AmgClient.Marshaler.Write(__msg, choiceCharacter);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_Player_Appear, Common.Player_Appear);
}

public bool Player_Appear(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int hostID, System.String userID, float x, float y, float z, float vx, float vy, float vz, float angle, int animNum, int choiceCharacter)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.Player_Appear;
__msg.Write(__msgid);
AmgClient.Marshaler.Write(__msg, hostID);
AmgClient.Marshaler.Write(__msg, userID);
AmgClient.Marshaler.Write(__msg, x);
AmgClient.Marshaler.Write(__msg, y);
AmgClient.Marshaler.Write(__msg, z);
AmgClient.Marshaler.Write(__msg, vx);
AmgClient.Marshaler.Write(__msg, vy);
AmgClient.Marshaler.Write(__msg, vz);
AmgClient.Marshaler.Write(__msg, angle);
AmgClient.Marshaler.Write(__msg, animNum);
AmgClient.Marshaler.Write(__msg, choiceCharacter);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_Player_Appear, Common.Player_Appear);
}
public bool Player_Disappear(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, System.String userID)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.Player_Disappear;
		__msg.Write(__msgid);
		AmgClient.Marshaler.Write(__msg, hostID);
		AmgClient.Marshaler.Write(__msg, userID);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_Player_Disappear, Common.Player_Disappear);
}

public bool Player_Disappear(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int hostID, System.String userID)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.Player_Disappear;
__msg.Write(__msgid);
AmgClient.Marshaler.Write(__msg, hostID);
AmgClient.Marshaler.Write(__msg, userID);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_Player_Disappear, Common.Player_Disappear);
}
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
const string RmiName_ReplyServerIn="ReplyServerIn";
const string RmiName_ReplyServerFailed="ReplyServerFailed";
const string RmiName_NotifyLoginSuccess="NotifyLoginSuccess";
const string RmiName_NotifyLoginFailed="NotifyLoginFailed";
const string RmiName_ReplyInRoom="ReplyInRoom";
const string RmiName_ReplyInGame="ReplyInGame";
const string RmiName_NotifyAddTree="NotifyAddTree";
const string RmiName_NotifyRemoveTree="NotifyRemoveTree";
const string RmiName_Player_Appear="Player_Appear";
const string RmiName_Player_Disappear="Player_Disappear";
       
const string RmiName_First = RmiName_ReplyServerIn;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
const string RmiName_ReplyServerIn="";
const string RmiName_ReplyServerFailed="";
const string RmiName_NotifyLoginSuccess="";
const string RmiName_NotifyLoginFailed="";
const string RmiName_ReplyInRoom="";
const string RmiName_ReplyInGame="";
const string RmiName_NotifyAddTree="";
const string RmiName_NotifyRemoveTree="";
const string RmiName_Player_Appear="";
const string RmiName_Player_Disappear="";
       
const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList() { return Common.RmiIDList; } 
	}
}
namespace MultiC2C
{
	internal class Proxy:Nettention.Proud.RmiProxy
	{
public bool ScribblePoint(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, UnityEngine.Vector3 point)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ScribblePoint;
		__msg.Write(__msgid);
		AmgClient.Marshaler.Write(__msg, point);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ScribblePoint, Common.ScribblePoint);
}

public bool ScribblePoint(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, UnityEngine.Vector3 point)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ScribblePoint;
__msg.Write(__msgid);
AmgClient.Marshaler.Write(__msg, point);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ScribblePoint, Common.ScribblePoint);
}
public bool OtherCharacterSelect(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String userID, int otherChoiceCharacter)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.OtherCharacterSelect;
		__msg.Write(__msgid);
		AmgClient.Marshaler.Write(__msg, userID);
		AmgClient.Marshaler.Write(__msg, otherChoiceCharacter);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_OtherCharacterSelect, Common.OtherCharacterSelect);
}

public bool OtherCharacterSelect(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String userID, int otherChoiceCharacter)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.OtherCharacterSelect;
__msg.Write(__msgid);
AmgClient.Marshaler.Write(__msg, userID);
AmgClient.Marshaler.Write(__msg, otherChoiceCharacter);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_OtherCharacterSelect, Common.OtherCharacterSelect);
}
public bool Player_CMove(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, float x, float y, float z, float vx, float vy, float vz, float angle, int animNum)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.Player_CMove;
		__msg.Write(__msgid);
		AmgClient.Marshaler.Write(__msg, x);
		AmgClient.Marshaler.Write(__msg, y);
		AmgClient.Marshaler.Write(__msg, z);
		AmgClient.Marshaler.Write(__msg, vx);
		AmgClient.Marshaler.Write(__msg, vy);
		AmgClient.Marshaler.Write(__msg, vz);
		AmgClient.Marshaler.Write(__msg, angle);
		AmgClient.Marshaler.Write(__msg, animNum);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_Player_CMove, Common.Player_CMove);
}

public bool Player_CMove(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, float x, float y, float z, float vx, float vy, float vz, float angle, int animNum)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.Player_CMove;
__msg.Write(__msgid);
AmgClient.Marshaler.Write(__msg, x);
AmgClient.Marshaler.Write(__msg, y);
AmgClient.Marshaler.Write(__msg, z);
AmgClient.Marshaler.Write(__msg, vx);
AmgClient.Marshaler.Write(__msg, vy);
AmgClient.Marshaler.Write(__msg, vz);
AmgClient.Marshaler.Write(__msg, angle);
AmgClient.Marshaler.Write(__msg, animNum);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_Player_CMove, Common.Player_CMove);
}
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
const string RmiName_ScribblePoint="ScribblePoint";
const string RmiName_OtherCharacterSelect="OtherCharacterSelect";
const string RmiName_Player_CMove="Player_CMove";
       
const string RmiName_First = RmiName_ScribblePoint;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
const string RmiName_ScribblePoint="";
const string RmiName_OtherCharacterSelect="";
const string RmiName_Player_CMove="";
       
const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList() { return Common.RmiIDList; } 
	}
}

