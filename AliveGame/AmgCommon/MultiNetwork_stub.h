  






// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.
   
#pragma once


#include "MultiNetwork_common.h"

     
namespace MultiC2S
{
	class Stub : public ::Proud::IRmiStub
	{
	public:
               
		virtual bool RequestServerIn ( ::Proud::HostID, ::Proud::RmiContext& )		{ 
			return false;
		} 

#define DECRMI_MultiC2S_RequestServerIn bool RequestServerIn ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_MultiC2S_RequestServerIn(DerivedClass) bool DerivedClass::RequestServerIn ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_MultiC2S_RequestServerIn RequestServerIn ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_MultiC2S_RequestServerIn ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
               
		virtual bool RequestLogin ( ::Proud::HostID, ::Proud::RmiContext& ,  const std::wstring & ,  const std::wstring & )		{ 
			return false;
		} 

#define DECRMI_MultiC2S_RequestLogin bool RequestLogin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const std::wstring & id,  const std::wstring & password) PN_OVERRIDE

#define DEFRMI_MultiC2S_RequestLogin(DerivedClass) bool DerivedClass::RequestLogin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const std::wstring & id,  const std::wstring & password)
#define CALL_MultiC2S_RequestLogin RequestLogin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const std::wstring & id,  const std::wstring & password)
#define PARAM_MultiC2S_RequestLogin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const std::wstring & id,  const std::wstring & password)
               
		virtual bool RequestRoomList ( ::Proud::HostID, ::Proud::RmiContext& )		{ 
			return false;
		} 

#define DECRMI_MultiC2S_RequestRoomList bool RequestRoomList ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_MultiC2S_RequestRoomList(DerivedClass) bool DerivedClass::RequestRoomList ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_MultiC2S_RequestRoomList RequestRoomList ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_MultiC2S_RequestRoomList ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
               
		virtual bool RequestInRoom ( ::Proud::HostID, ::Proud::RmiContext& ,  const String & ,  const bool & ,  const std::wstring & )		{ 
			return false;
		} 

#define DECRMI_MultiC2S_RequestInRoom bool RequestInRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const String & roomName,  const bool & isNewRoom,  const std::wstring & id) PN_OVERRIDE

#define DEFRMI_MultiC2S_RequestInRoom(DerivedClass) bool DerivedClass::RequestInRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const String & roomName,  const bool & isNewRoom,  const std::wstring & id)
#define CALL_MultiC2S_RequestInRoom RequestInRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const String & roomName,  const bool & isNewRoom,  const std::wstring & id)
#define PARAM_MultiC2S_RequestInRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const String & roomName,  const bool & isNewRoom,  const std::wstring & id)
               
		virtual bool RequestFastRoom ( ::Proud::HostID, ::Proud::RmiContext& ,  const std::wstring & )		{ 
			return false;
		} 

#define DECRMI_MultiC2S_RequestFastRoom bool RequestFastRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const std::wstring & id) PN_OVERRIDE

#define DEFRMI_MultiC2S_RequestFastRoom(DerivedClass) bool DerivedClass::RequestFastRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const std::wstring & id)
#define CALL_MultiC2S_RequestFastRoom RequestFastRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const std::wstring & id)
#define PARAM_MultiC2S_RequestFastRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const std::wstring & id)
               
		virtual bool RequestInGame ( ::Proud::HostID, ::Proud::RmiContext& ,  const String & )		{ 
			return false;
		} 

#define DECRMI_MultiC2S_RequestInGame bool RequestInGame ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const String & roomName) PN_OVERRIDE

#define DEFRMI_MultiC2S_RequestInGame(DerivedClass) bool DerivedClass::RequestInGame ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const String & roomName)
#define CALL_MultiC2S_RequestInGame RequestInGame ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const String & roomName)
#define PARAM_MultiC2S_RequestInGame ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const String & roomName)
               
		virtual bool JoinGameScene ( ::Proud::HostID, ::Proud::RmiContext& ,  const float & ,  const float & ,  const float & ,  const float & ,  const int & )		{ 
			return false;
		} 

#define DECRMI_MultiC2S_JoinGameScene bool JoinGameScene ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const float & x,  const float & y,  const float & z,  const float & angle,  const int & animNum) PN_OVERRIDE

#define DEFRMI_MultiC2S_JoinGameScene(DerivedClass) bool DerivedClass::JoinGameScene ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const float & x,  const float & y,  const float & z,  const float & angle,  const int & animNum)
#define CALL_MultiC2S_JoinGameScene JoinGameScene ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const float & x,  const float & y,  const float & z,  const float & angle,  const int & animNum)
#define PARAM_MultiC2S_JoinGameScene ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const float & x,  const float & y,  const float & z,  const float & angle,  const int & animNum)
               
		virtual bool Player_SMove ( ::Proud::HostID, ::Proud::RmiContext& ,  const float & ,  const float & ,  const float & ,  const float & ,  const float & ,  const float & ,  const float & ,  const int & )		{ 
			return false;
		} 

#define DECRMI_MultiC2S_Player_SMove bool Player_SMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const float & x,  const float & y,  const float & z,  const float & vx,  const float & vy,  const float & vz,  const float & angle,  const int & animNum) PN_OVERRIDE

#define DEFRMI_MultiC2S_Player_SMove(DerivedClass) bool DerivedClass::Player_SMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const float & x,  const float & y,  const float & z,  const float & vx,  const float & vy,  const float & vz,  const float & angle,  const int & animNum)
#define CALL_MultiC2S_Player_SMove Player_SMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const float & x,  const float & y,  const float & z,  const float & vx,  const float & vy,  const float & vz,  const float & angle,  const int & animNum)
#define PARAM_MultiC2S_Player_SMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const float & x,  const float & y,  const float & z,  const float & vx,  const float & vy,  const float & vz,  const float & angle,  const int & animNum)
               
		virtual bool RequestAddTree ( ::Proud::HostID, ::Proud::RmiContext& ,  const D3DXVECTOR3 & )		{ 
			return false;
		} 

#define DECRMI_MultiC2S_RequestAddTree bool RequestAddTree ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const D3DXVECTOR3 & position) PN_OVERRIDE

#define DEFRMI_MultiC2S_RequestAddTree(DerivedClass) bool DerivedClass::RequestAddTree ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const D3DXVECTOR3 & position)
#define CALL_MultiC2S_RequestAddTree RequestAddTree ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const D3DXVECTOR3 & position)
#define PARAM_MultiC2S_RequestAddTree ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const D3DXVECTOR3 & position)
               
		virtual bool RequestRemoveTree ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & )		{ 
			return false;
		} 

#define DECRMI_MultiC2S_RequestRemoveTree bool RequestRemoveTree ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & treeID) PN_OVERRIDE

#define DEFRMI_MultiC2S_RequestRemoveTree(DerivedClass) bool DerivedClass::RequestRemoveTree ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & treeID)
#define CALL_MultiC2S_RequestRemoveTree RequestRemoveTree ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & treeID)
#define PARAM_MultiC2S_RequestRemoveTree ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & treeID)
 
		virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
		static const PNTCHAR* RmiName_RequestServerIn;
		static const PNTCHAR* RmiName_RequestLogin;
		static const PNTCHAR* RmiName_RequestRoomList;
		static const PNTCHAR* RmiName_RequestInRoom;
		static const PNTCHAR* RmiName_RequestFastRoom;
		static const PNTCHAR* RmiName_RequestInGame;
		static const PNTCHAR* RmiName_JoinGameScene;
		static const PNTCHAR* RmiName_Player_SMove;
		static const PNTCHAR* RmiName_RequestAddTree;
		static const PNTCHAR* RmiName_RequestRemoveTree;
		static const PNTCHAR* RmiName_First;
		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

#ifdef SUPPORTS_CPP11 
	
	class StubFunctional : public Stub 
	{
	public:
               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > RequestServerIn_Function;
		virtual bool RequestServerIn ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) 
		{ 
			if (RequestServerIn_Function==nullptr) 
				return true; 
			return RequestServerIn_Function(remote,rmiContext); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const std::wstring & ,  const std::wstring & ) > RequestLogin_Function;
		virtual bool RequestLogin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const std::wstring & id,  const std::wstring & password) 
		{ 
			if (RequestLogin_Function==nullptr) 
				return true; 
			return RequestLogin_Function(remote,rmiContext, id, password); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > RequestRoomList_Function;
		virtual bool RequestRoomList ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) 
		{ 
			if (RequestRoomList_Function==nullptr) 
				return true; 
			return RequestRoomList_Function(remote,rmiContext); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const String & ,  const bool & ,  const std::wstring & ) > RequestInRoom_Function;
		virtual bool RequestInRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const String & roomName,  const bool & isNewRoom,  const std::wstring & id) 
		{ 
			if (RequestInRoom_Function==nullptr) 
				return true; 
			return RequestInRoom_Function(remote,rmiContext, roomName, isNewRoom, id); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const std::wstring & ) > RequestFastRoom_Function;
		virtual bool RequestFastRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const std::wstring & id) 
		{ 
			if (RequestFastRoom_Function==nullptr) 
				return true; 
			return RequestFastRoom_Function(remote,rmiContext, id); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const String & ) > RequestInGame_Function;
		virtual bool RequestInGame ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const String & roomName) 
		{ 
			if (RequestInGame_Function==nullptr) 
				return true; 
			return RequestInGame_Function(remote,rmiContext, roomName); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const float & ,  const float & ,  const float & ,  const float & ,  const int & ) > JoinGameScene_Function;
		virtual bool JoinGameScene ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const float & x,  const float & y,  const float & z,  const float & angle,  const int & animNum) 
		{ 
			if (JoinGameScene_Function==nullptr) 
				return true; 
			return JoinGameScene_Function(remote,rmiContext, x, y, z, angle, animNum); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const float & ,  const float & ,  const float & ,  const float & ,  const float & ,  const float & ,  const float & ,  const int & ) > Player_SMove_Function;
		virtual bool Player_SMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const float & x,  const float & y,  const float & z,  const float & vx,  const float & vy,  const float & vz,  const float & angle,  const int & animNum) 
		{ 
			if (Player_SMove_Function==nullptr) 
				return true; 
			return Player_SMove_Function(remote,rmiContext, x, y, z, vx, vy, vz, angle, animNum); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const D3DXVECTOR3 & ) > RequestAddTree_Function;
		virtual bool RequestAddTree ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const D3DXVECTOR3 & position) 
		{ 
			if (RequestAddTree_Function==nullptr) 
				return true; 
			return RequestAddTree_Function(remote,rmiContext, position); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ) > RequestRemoveTree_Function;
		virtual bool RequestRemoveTree ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & treeID) 
		{ 
			if (RequestRemoveTree_Function==nullptr) 
				return true; 
			return RequestRemoveTree_Function(remote,rmiContext, treeID); 
		}

	};
#endif
}

     
namespace MultiS2C
{
	class Stub : public ::Proud::IRmiStub
	{
	public:
               
		virtual bool ReplyServerIn ( ::Proud::HostID, ::Proud::RmiContext& )		{ 
			return false;
		} 

#define DECRMI_MultiS2C_ReplyServerIn bool ReplyServerIn ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_MultiS2C_ReplyServerIn(DerivedClass) bool DerivedClass::ReplyServerIn ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_MultiS2C_ReplyServerIn ReplyServerIn ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_MultiS2C_ReplyServerIn ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
               
		virtual bool ReplyServerFailed ( ::Proud::HostID, ::Proud::RmiContext& ,  const std::wstring & )		{ 
			return false;
		} 

#define DECRMI_MultiS2C_ReplyServerFailed bool ReplyServerFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const std::wstring & reason) PN_OVERRIDE

#define DEFRMI_MultiS2C_ReplyServerFailed(DerivedClass) bool DerivedClass::ReplyServerFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const std::wstring & reason)
#define CALL_MultiS2C_ReplyServerFailed ReplyServerFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const std::wstring & reason)
#define PARAM_MultiS2C_ReplyServerFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const std::wstring & reason)
               
		virtual bool NotifyLoginSuccess ( ::Proud::HostID, ::Proud::RmiContext& )		{ 
			return false;
		} 

#define DECRMI_MultiS2C_NotifyLoginSuccess bool NotifyLoginSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_MultiS2C_NotifyLoginSuccess(DerivedClass) bool DerivedClass::NotifyLoginSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_MultiS2C_NotifyLoginSuccess NotifyLoginSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_MultiS2C_NotifyLoginSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
               
		virtual bool NotifyLoginFailed ( ::Proud::HostID, ::Proud::RmiContext& ,  const std::wstring & )		{ 
			return false;
		} 

#define DECRMI_MultiS2C_NotifyLoginFailed bool NotifyLoginFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const std::wstring & reason) PN_OVERRIDE

#define DEFRMI_MultiS2C_NotifyLoginFailed(DerivedClass) bool DerivedClass::NotifyLoginFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const std::wstring & reason)
#define CALL_MultiS2C_NotifyLoginFailed NotifyLoginFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const std::wstring & reason)
#define PARAM_MultiS2C_NotifyLoginFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const std::wstring & reason)
               
		virtual bool ReplyInRoom ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const String & ,  const int & )		{ 
			return false;
		} 

#define DECRMI_MultiS2C_ReplyInRoom bool ReplyInRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & result,  const String & comment,  const int & choiceCharacter) PN_OVERRIDE

#define DEFRMI_MultiS2C_ReplyInRoom(DerivedClass) bool DerivedClass::ReplyInRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & result,  const String & comment,  const int & choiceCharacter)
#define CALL_MultiS2C_ReplyInRoom ReplyInRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & result,  const String & comment,  const int & choiceCharacter)
#define PARAM_MultiS2C_ReplyInRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & result,  const String & comment,  const int & choiceCharacter)
               
		virtual bool ReplyInGame ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const String & )		{ 
			return false;
		} 

#define DECRMI_MultiS2C_ReplyInGame bool ReplyInGame ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & result,  const String & comment) PN_OVERRIDE

#define DEFRMI_MultiS2C_ReplyInGame(DerivedClass) bool DerivedClass::ReplyInGame ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & result,  const String & comment)
#define CALL_MultiS2C_ReplyInGame ReplyInGame ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & result,  const String & comment)
#define PARAM_MultiS2C_ReplyInGame ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & result,  const String & comment)
               
		virtual bool NotifyAddTree ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const D3DXVECTOR3 & )		{ 
			return false;
		} 

#define DECRMI_MultiS2C_NotifyAddTree bool NotifyAddTree ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & treeID,  const D3DXVECTOR3 & position) PN_OVERRIDE

#define DEFRMI_MultiS2C_NotifyAddTree(DerivedClass) bool DerivedClass::NotifyAddTree ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & treeID,  const D3DXVECTOR3 & position)
#define CALL_MultiS2C_NotifyAddTree NotifyAddTree ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & treeID,  const D3DXVECTOR3 & position)
#define PARAM_MultiS2C_NotifyAddTree ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & treeID,  const D3DXVECTOR3 & position)
               
		virtual bool NotifyRemoveTree ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & )		{ 
			return false;
		} 

#define DECRMI_MultiS2C_NotifyRemoveTree bool NotifyRemoveTree ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & treeID) PN_OVERRIDE

#define DEFRMI_MultiS2C_NotifyRemoveTree(DerivedClass) bool DerivedClass::NotifyRemoveTree ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & treeID)
#define CALL_MultiS2C_NotifyRemoveTree NotifyRemoveTree ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & treeID)
#define PARAM_MultiS2C_NotifyRemoveTree ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & treeID)
               
		virtual bool Player_Appear ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const std::wstring & ,  const float & ,  const float & ,  const float & ,  const float & ,  const float & ,  const float & ,  const float & ,  const int & ,  const int & )		{ 
			return false;
		} 

#define DECRMI_MultiS2C_Player_Appear bool Player_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const std::wstring & userID,  const float & x,  const float & y,  const float & z,  const float & vx,  const float & vy,  const float & vz,  const float & angle,  const int & animNum,  const int & choiceCharacter) PN_OVERRIDE

#define DEFRMI_MultiS2C_Player_Appear(DerivedClass) bool DerivedClass::Player_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const std::wstring & userID,  const float & x,  const float & y,  const float & z,  const float & vx,  const float & vy,  const float & vz,  const float & angle,  const int & animNum,  const int & choiceCharacter)
#define CALL_MultiS2C_Player_Appear Player_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const std::wstring & userID,  const float & x,  const float & y,  const float & z,  const float & vx,  const float & vy,  const float & vz,  const float & angle,  const int & animNum,  const int & choiceCharacter)
#define PARAM_MultiS2C_Player_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const std::wstring & userID,  const float & x,  const float & y,  const float & z,  const float & vx,  const float & vy,  const float & vz,  const float & angle,  const int & animNum,  const int & choiceCharacter)
               
		virtual bool Player_Disappear ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const std::wstring & )		{ 
			return false;
		} 

#define DECRMI_MultiS2C_Player_Disappear bool Player_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const std::wstring & userID) PN_OVERRIDE

#define DEFRMI_MultiS2C_Player_Disappear(DerivedClass) bool DerivedClass::Player_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const std::wstring & userID)
#define CALL_MultiS2C_Player_Disappear Player_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const std::wstring & userID)
#define PARAM_MultiS2C_Player_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const std::wstring & userID)
 
		virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
		static const PNTCHAR* RmiName_ReplyServerIn;
		static const PNTCHAR* RmiName_ReplyServerFailed;
		static const PNTCHAR* RmiName_NotifyLoginSuccess;
		static const PNTCHAR* RmiName_NotifyLoginFailed;
		static const PNTCHAR* RmiName_ReplyInRoom;
		static const PNTCHAR* RmiName_ReplyInGame;
		static const PNTCHAR* RmiName_NotifyAddTree;
		static const PNTCHAR* RmiName_NotifyRemoveTree;
		static const PNTCHAR* RmiName_Player_Appear;
		static const PNTCHAR* RmiName_Player_Disappear;
		static const PNTCHAR* RmiName_First;
		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

#ifdef SUPPORTS_CPP11 
	
	class StubFunctional : public Stub 
	{
	public:
               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > ReplyServerIn_Function;
		virtual bool ReplyServerIn ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) 
		{ 
			if (ReplyServerIn_Function==nullptr) 
				return true; 
			return ReplyServerIn_Function(remote,rmiContext); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const std::wstring & ) > ReplyServerFailed_Function;
		virtual bool ReplyServerFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const std::wstring & reason) 
		{ 
			if (ReplyServerFailed_Function==nullptr) 
				return true; 
			return ReplyServerFailed_Function(remote,rmiContext, reason); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > NotifyLoginSuccess_Function;
		virtual bool NotifyLoginSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) 
		{ 
			if (NotifyLoginSuccess_Function==nullptr) 
				return true; 
			return NotifyLoginSuccess_Function(remote,rmiContext); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const std::wstring & ) > NotifyLoginFailed_Function;
		virtual bool NotifyLoginFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const std::wstring & reason) 
		{ 
			if (NotifyLoginFailed_Function==nullptr) 
				return true; 
			return NotifyLoginFailed_Function(remote,rmiContext, reason); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const String & ,  const int & ) > ReplyInRoom_Function;
		virtual bool ReplyInRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & result,  const String & comment,  const int & choiceCharacter) 
		{ 
			if (ReplyInRoom_Function==nullptr) 
				return true; 
			return ReplyInRoom_Function(remote,rmiContext, result, comment, choiceCharacter); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const String & ) > ReplyInGame_Function;
		virtual bool ReplyInGame ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & result,  const String & comment) 
		{ 
			if (ReplyInGame_Function==nullptr) 
				return true; 
			return ReplyInGame_Function(remote,rmiContext, result, comment); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const D3DXVECTOR3 & ) > NotifyAddTree_Function;
		virtual bool NotifyAddTree ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & treeID,  const D3DXVECTOR3 & position) 
		{ 
			if (NotifyAddTree_Function==nullptr) 
				return true; 
			return NotifyAddTree_Function(remote,rmiContext, treeID, position); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ) > NotifyRemoveTree_Function;
		virtual bool NotifyRemoveTree ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & treeID) 
		{ 
			if (NotifyRemoveTree_Function==nullptr) 
				return true; 
			return NotifyRemoveTree_Function(remote,rmiContext, treeID); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const std::wstring & ,  const float & ,  const float & ,  const float & ,  const float & ,  const float & ,  const float & ,  const float & ,  const int & ,  const int & ) > Player_Appear_Function;
		virtual bool Player_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const std::wstring & userID,  const float & x,  const float & y,  const float & z,  const float & vx,  const float & vy,  const float & vz,  const float & angle,  const int & animNum,  const int & choiceCharacter) 
		{ 
			if (Player_Appear_Function==nullptr) 
				return true; 
			return Player_Appear_Function(remote,rmiContext, hostID, userID, x, y, z, vx, vy, vz, angle, animNum, choiceCharacter); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const int & ,  const std::wstring & ) > Player_Disappear_Function;
		virtual bool Player_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const std::wstring & userID) 
		{ 
			if (Player_Disappear_Function==nullptr) 
				return true; 
			return Player_Disappear_Function(remote,rmiContext, hostID, userID); 
		}

	};
#endif
}

     
namespace MultiC2C
{
	class Stub : public ::Proud::IRmiStub
	{
	public:
               
		virtual bool ScribblePoint ( ::Proud::HostID, ::Proud::RmiContext& ,  const D3DXVECTOR3 & )		{ 
			return false;
		} 

#define DECRMI_MultiC2C_ScribblePoint bool ScribblePoint ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const D3DXVECTOR3 & point) PN_OVERRIDE

#define DEFRMI_MultiC2C_ScribblePoint(DerivedClass) bool DerivedClass::ScribblePoint ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const D3DXVECTOR3 & point)
#define CALL_MultiC2C_ScribblePoint ScribblePoint ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const D3DXVECTOR3 & point)
#define PARAM_MultiC2C_ScribblePoint ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const D3DXVECTOR3 & point)
               
		virtual bool OtherCharacterSelect ( ::Proud::HostID, ::Proud::RmiContext& ,  const std::wstring & ,  const int & )		{ 
			return false;
		} 

#define DECRMI_MultiC2C_OtherCharacterSelect bool OtherCharacterSelect ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const std::wstring & userID,  const int & otherChoiceCharacter) PN_OVERRIDE

#define DEFRMI_MultiC2C_OtherCharacterSelect(DerivedClass) bool DerivedClass::OtherCharacterSelect ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const std::wstring & userID,  const int & otherChoiceCharacter)
#define CALL_MultiC2C_OtherCharacterSelect OtherCharacterSelect ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const std::wstring & userID,  const int & otherChoiceCharacter)
#define PARAM_MultiC2C_OtherCharacterSelect ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const std::wstring & userID,  const int & otherChoiceCharacter)
               
		virtual bool Player_CMove ( ::Proud::HostID, ::Proud::RmiContext& ,  const float & ,  const float & ,  const float & ,  const float & ,  const float & ,  const float & ,  const float & ,  const int & )		{ 
			return false;
		} 

#define DECRMI_MultiC2C_Player_CMove bool Player_CMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const float & x,  const float & y,  const float & z,  const float & vx,  const float & vy,  const float & vz,  const float & angle,  const int & animNum) PN_OVERRIDE

#define DEFRMI_MultiC2C_Player_CMove(DerivedClass) bool DerivedClass::Player_CMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const float & x,  const float & y,  const float & z,  const float & vx,  const float & vy,  const float & vz,  const float & angle,  const int & animNum)
#define CALL_MultiC2C_Player_CMove Player_CMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const float & x,  const float & y,  const float & z,  const float & vx,  const float & vy,  const float & vz,  const float & angle,  const int & animNum)
#define PARAM_MultiC2C_Player_CMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const float & x,  const float & y,  const float & z,  const float & vx,  const float & vy,  const float & vz,  const float & angle,  const int & animNum)
 
		virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
		static const PNTCHAR* RmiName_ScribblePoint;
		static const PNTCHAR* RmiName_OtherCharacterSelect;
		static const PNTCHAR* RmiName_Player_CMove;
		static const PNTCHAR* RmiName_First;
		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

#ifdef SUPPORTS_CPP11 
	
	class StubFunctional : public Stub 
	{
	public:
               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const D3DXVECTOR3 & ) > ScribblePoint_Function;
		virtual bool ScribblePoint ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const D3DXVECTOR3 & point) 
		{ 
			if (ScribblePoint_Function==nullptr) 
				return true; 
			return ScribblePoint_Function(remote,rmiContext, point); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const std::wstring & ,  const int & ) > OtherCharacterSelect_Function;
		virtual bool OtherCharacterSelect ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const std::wstring & userID,  const int & otherChoiceCharacter) 
		{ 
			if (OtherCharacterSelect_Function==nullptr) 
				return true; 
			return OtherCharacterSelect_Function(remote,rmiContext, userID, otherChoiceCharacter); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ,  const float & ,  const float & ,  const float & ,  const float & ,  const float & ,  const float & ,  const float & ,  const int & ) > Player_CMove_Function;
		virtual bool Player_CMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const float & x,  const float & y,  const float & z,  const float & vx,  const float & vy,  const float & vz,  const float & angle,  const int & animNum) 
		{ 
			if (Player_CMove_Function==nullptr) 
				return true; 
			return Player_CMove_Function(remote,rmiContext, x, y, z, vx, vy, vz, angle, animNum); 
		}

	};
#endif
}

