




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.


#include "MultiNetwork_proxy.h"

namespace MultiC2S
{
        
	bool Proxy::RequestServerIn ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestServerIn;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestServerIn, (::Proud::RmiID)Rmi_RequestServerIn);
	}

	bool Proxy::RequestServerIn ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestServerIn;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestServerIn, (::Proud::RmiID)Rmi_RequestServerIn);
	}
        
	bool Proxy::RequestLogin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const std::wstring & id,  const std::wstring & password)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestLogin;
__msg.Write(__msgid); 
	
__msg << id;
__msg << password;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestLogin, (::Proud::RmiID)Rmi_RequestLogin);
	}

	bool Proxy::RequestLogin ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const std::wstring & id,  const std::wstring & password)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestLogin;
__msg.Write(__msgid); 
	
__msg << id;
__msg << password;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestLogin, (::Proud::RmiID)Rmi_RequestLogin);
	}
        
	bool Proxy::RequestRoomList ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestRoomList;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestRoomList, (::Proud::RmiID)Rmi_RequestRoomList);
	}

	bool Proxy::RequestRoomList ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestRoomList;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestRoomList, (::Proud::RmiID)Rmi_RequestRoomList);
	}
        
	bool Proxy::RequestInRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const String & roomName,  const bool & isNewRoom,  const std::wstring & id)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestInRoom;
__msg.Write(__msgid); 
	
__msg << roomName;
__msg << isNewRoom;
__msg << id;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestInRoom, (::Proud::RmiID)Rmi_RequestInRoom);
	}

	bool Proxy::RequestInRoom ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const String & roomName,  const bool & isNewRoom,  const std::wstring & id)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestInRoom;
__msg.Write(__msgid); 
	
__msg << roomName;
__msg << isNewRoom;
__msg << id;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestInRoom, (::Proud::RmiID)Rmi_RequestInRoom);
	}
        
	bool Proxy::RequestFastRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const std::wstring & id)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestFastRoom;
__msg.Write(__msgid); 
	
__msg << id;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestFastRoom, (::Proud::RmiID)Rmi_RequestFastRoom);
	}

	bool Proxy::RequestFastRoom ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const std::wstring & id)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestFastRoom;
__msg.Write(__msgid); 
	
__msg << id;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestFastRoom, (::Proud::RmiID)Rmi_RequestFastRoom);
	}
        
	bool Proxy::RequestInGame ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const String & roomName)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestInGame;
__msg.Write(__msgid); 
	
__msg << roomName;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestInGame, (::Proud::RmiID)Rmi_RequestInGame);
	}

	bool Proxy::RequestInGame ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const String & roomName)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestInGame;
__msg.Write(__msgid); 
	
__msg << roomName;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestInGame, (::Proud::RmiID)Rmi_RequestInGame);
	}
        
	bool Proxy::JoinGameScene ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const float & x,  const float & y,  const float & z,  const float & angle,  const int & animNum)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_JoinGameScene;
__msg.Write(__msgid); 
	
__msg << x;
__msg << y;
__msg << z;
__msg << angle;
__msg << animNum;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_JoinGameScene, (::Proud::RmiID)Rmi_JoinGameScene);
	}

	bool Proxy::JoinGameScene ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const float & x,  const float & y,  const float & z,  const float & angle,  const int & animNum)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_JoinGameScene;
__msg.Write(__msgid); 
	
__msg << x;
__msg << y;
__msg << z;
__msg << angle;
__msg << animNum;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_JoinGameScene, (::Proud::RmiID)Rmi_JoinGameScene);
	}
        
	bool Proxy::Player_SMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const float & x,  const float & y,  const float & z,  const float & vx,  const float & vy,  const float & vz,  const float & angle,  const int & animNum)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Player_SMove;
__msg.Write(__msgid); 
	
__msg << x;
__msg << y;
__msg << z;
__msg << vx;
__msg << vy;
__msg << vz;
__msg << angle;
__msg << animNum;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_Player_SMove, (::Proud::RmiID)Rmi_Player_SMove);
	}

	bool Proxy::Player_SMove ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const float & x,  const float & y,  const float & z,  const float & vx,  const float & vy,  const float & vz,  const float & angle,  const int & animNum)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Player_SMove;
__msg.Write(__msgid); 
	
__msg << x;
__msg << y;
__msg << z;
__msg << vx;
__msg << vy;
__msg << vz;
__msg << angle;
__msg << animNum;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_Player_SMove, (::Proud::RmiID)Rmi_Player_SMove);
	}
        
	bool Proxy::RequestAddTree ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const D3DXVECTOR3 & position)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestAddTree;
__msg.Write(__msgid); 
	
__msg << position;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestAddTree, (::Proud::RmiID)Rmi_RequestAddTree);
	}

	bool Proxy::RequestAddTree ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const D3DXVECTOR3 & position)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestAddTree;
__msg.Write(__msgid); 
	
__msg << position;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestAddTree, (::Proud::RmiID)Rmi_RequestAddTree);
	}
        
	bool Proxy::RequestRemoveTree ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & treeID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestRemoveTree;
__msg.Write(__msgid); 
	
__msg << treeID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_RequestRemoveTree, (::Proud::RmiID)Rmi_RequestRemoveTree);
	}

	bool Proxy::RequestRemoveTree ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & treeID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_RequestRemoveTree;
__msg.Write(__msgid); 
	
__msg << treeID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_RequestRemoveTree, (::Proud::RmiID)Rmi_RequestRemoveTree);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestServerIn =_PNT("RequestServerIn");
#else
const PNTCHAR* Proxy::RmiName_RequestServerIn =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestLogin =_PNT("RequestLogin");
#else
const PNTCHAR* Proxy::RmiName_RequestLogin =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestRoomList =_PNT("RequestRoomList");
#else
const PNTCHAR* Proxy::RmiName_RequestRoomList =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestInRoom =_PNT("RequestInRoom");
#else
const PNTCHAR* Proxy::RmiName_RequestInRoom =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestFastRoom =_PNT("RequestFastRoom");
#else
const PNTCHAR* Proxy::RmiName_RequestFastRoom =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestInGame =_PNT("RequestInGame");
#else
const PNTCHAR* Proxy::RmiName_RequestInGame =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_JoinGameScene =_PNT("JoinGameScene");
#else
const PNTCHAR* Proxy::RmiName_JoinGameScene =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_Player_SMove =_PNT("Player_SMove");
#else
const PNTCHAR* Proxy::RmiName_Player_SMove =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestAddTree =_PNT("RequestAddTree");
#else
const PNTCHAR* Proxy::RmiName_RequestAddTree =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_RequestRemoveTree =_PNT("RequestRemoveTree");
#else
const PNTCHAR* Proxy::RmiName_RequestRemoveTree =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_RequestServerIn;
}
namespace MultiS2C
{
        
	bool Proxy::ReplyServerIn ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ReplyServerIn;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_ReplyServerIn, (::Proud::RmiID)Rmi_ReplyServerIn);
	}

	bool Proxy::ReplyServerIn ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ReplyServerIn;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_ReplyServerIn, (::Proud::RmiID)Rmi_ReplyServerIn);
	}
        
	bool Proxy::ReplyServerFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const std::wstring & reason)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ReplyServerFailed;
__msg.Write(__msgid); 
	
__msg << reason;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_ReplyServerFailed, (::Proud::RmiID)Rmi_ReplyServerFailed);
	}

	bool Proxy::ReplyServerFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const std::wstring & reason)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ReplyServerFailed;
__msg.Write(__msgid); 
	
__msg << reason;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_ReplyServerFailed, (::Proud::RmiID)Rmi_ReplyServerFailed);
	}
        
	bool Proxy::NotifyLoginSuccess ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyLoginSuccess;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyLoginSuccess, (::Proud::RmiID)Rmi_NotifyLoginSuccess);
	}

	bool Proxy::NotifyLoginSuccess ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyLoginSuccess;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyLoginSuccess, (::Proud::RmiID)Rmi_NotifyLoginSuccess);
	}
        
	bool Proxy::NotifyLoginFailed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const std::wstring & reason)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyLoginFailed;
__msg.Write(__msgid); 
	
__msg << reason;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyLoginFailed, (::Proud::RmiID)Rmi_NotifyLoginFailed);
	}

	bool Proxy::NotifyLoginFailed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const std::wstring & reason)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyLoginFailed;
__msg.Write(__msgid); 
	
__msg << reason;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyLoginFailed, (::Proud::RmiID)Rmi_NotifyLoginFailed);
	}
        
	bool Proxy::ReplyInRoom ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & result,  const String & comment,  const int & choiceCharacter)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ReplyInRoom;
__msg.Write(__msgid); 
	
__msg << result;
__msg << comment;
__msg << choiceCharacter;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_ReplyInRoom, (::Proud::RmiID)Rmi_ReplyInRoom);
	}

	bool Proxy::ReplyInRoom ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & result,  const String & comment,  const int & choiceCharacter)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ReplyInRoom;
__msg.Write(__msgid); 
	
__msg << result;
__msg << comment;
__msg << choiceCharacter;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_ReplyInRoom, (::Proud::RmiID)Rmi_ReplyInRoom);
	}
        
	bool Proxy::ReplyInGame ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & result,  const String & comment)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ReplyInGame;
__msg.Write(__msgid); 
	
__msg << result;
__msg << comment;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_ReplyInGame, (::Proud::RmiID)Rmi_ReplyInGame);
	}

	bool Proxy::ReplyInGame ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & result,  const String & comment)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ReplyInGame;
__msg.Write(__msgid); 
	
__msg << result;
__msg << comment;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_ReplyInGame, (::Proud::RmiID)Rmi_ReplyInGame);
	}
        
	bool Proxy::NotifyAddTree ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & treeID,  const D3DXVECTOR3 & position)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyAddTree;
__msg.Write(__msgid); 
	
__msg << treeID;
__msg << position;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyAddTree, (::Proud::RmiID)Rmi_NotifyAddTree);
	}

	bool Proxy::NotifyAddTree ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & treeID,  const D3DXVECTOR3 & position)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyAddTree;
__msg.Write(__msgid); 
	
__msg << treeID;
__msg << position;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyAddTree, (::Proud::RmiID)Rmi_NotifyAddTree);
	}
        
	bool Proxy::NotifyRemoveTree ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & treeID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyRemoveTree;
__msg.Write(__msgid); 
	
__msg << treeID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_NotifyRemoveTree, (::Proud::RmiID)Rmi_NotifyRemoveTree);
	}

	bool Proxy::NotifyRemoveTree ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & treeID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_NotifyRemoveTree;
__msg.Write(__msgid); 
	
__msg << treeID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_NotifyRemoveTree, (::Proud::RmiID)Rmi_NotifyRemoveTree);
	}
        
	bool Proxy::Player_Appear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const std::wstring & userID,  const float & x,  const float & y,  const float & z,  const float & vx,  const float & vy,  const float & vz,  const float & angle,  const int & animNum,  const int & choiceCharacter)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Player_Appear;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << userID;
__msg << x;
__msg << y;
__msg << z;
__msg << vx;
__msg << vy;
__msg << vz;
__msg << angle;
__msg << animNum;
__msg << choiceCharacter;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_Player_Appear, (::Proud::RmiID)Rmi_Player_Appear);
	}

	bool Proxy::Player_Appear ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & hostID,  const std::wstring & userID,  const float & x,  const float & y,  const float & z,  const float & vx,  const float & vy,  const float & vz,  const float & angle,  const int & animNum,  const int & choiceCharacter)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Player_Appear;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << userID;
__msg << x;
__msg << y;
__msg << z;
__msg << vx;
__msg << vy;
__msg << vz;
__msg << angle;
__msg << animNum;
__msg << choiceCharacter;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_Player_Appear, (::Proud::RmiID)Rmi_Player_Appear);
	}
        
	bool Proxy::Player_Disappear ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const int & hostID,  const std::wstring & userID)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Player_Disappear;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << userID;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_Player_Disappear, (::Proud::RmiID)Rmi_Player_Disappear);
	}

	bool Proxy::Player_Disappear ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const int & hostID,  const std::wstring & userID)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Player_Disappear;
__msg.Write(__msgid); 
	
__msg << hostID;
__msg << userID;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_Player_Disappear, (::Proud::RmiID)Rmi_Player_Disappear);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_ReplyServerIn =_PNT("ReplyServerIn");
#else
const PNTCHAR* Proxy::RmiName_ReplyServerIn =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_ReplyServerFailed =_PNT("ReplyServerFailed");
#else
const PNTCHAR* Proxy::RmiName_ReplyServerFailed =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyLoginSuccess =_PNT("NotifyLoginSuccess");
#else
const PNTCHAR* Proxy::RmiName_NotifyLoginSuccess =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyLoginFailed =_PNT("NotifyLoginFailed");
#else
const PNTCHAR* Proxy::RmiName_NotifyLoginFailed =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_ReplyInRoom =_PNT("ReplyInRoom");
#else
const PNTCHAR* Proxy::RmiName_ReplyInRoom =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_ReplyInGame =_PNT("ReplyInGame");
#else
const PNTCHAR* Proxy::RmiName_ReplyInGame =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyAddTree =_PNT("NotifyAddTree");
#else
const PNTCHAR* Proxy::RmiName_NotifyAddTree =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_NotifyRemoveTree =_PNT("NotifyRemoveTree");
#else
const PNTCHAR* Proxy::RmiName_NotifyRemoveTree =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_Player_Appear =_PNT("Player_Appear");
#else
const PNTCHAR* Proxy::RmiName_Player_Appear =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_Player_Disappear =_PNT("Player_Disappear");
#else
const PNTCHAR* Proxy::RmiName_Player_Disappear =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_ReplyServerIn;
}
namespace MultiC2C
{
        
	bool Proxy::ScribblePoint ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const D3DXVECTOR3 & point)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ScribblePoint;
__msg.Write(__msgid); 
	
__msg << point;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_ScribblePoint, (::Proud::RmiID)Rmi_ScribblePoint);
	}

	bool Proxy::ScribblePoint ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const D3DXVECTOR3 & point)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_ScribblePoint;
__msg.Write(__msgid); 
	
__msg << point;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_ScribblePoint, (::Proud::RmiID)Rmi_ScribblePoint);
	}
        
	bool Proxy::OtherCharacterSelect ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const std::wstring & userID,  const int & otherChoiceCharacter)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_OtherCharacterSelect;
__msg.Write(__msgid); 
	
__msg << userID;
__msg << otherChoiceCharacter;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_OtherCharacterSelect, (::Proud::RmiID)Rmi_OtherCharacterSelect);
	}

	bool Proxy::OtherCharacterSelect ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const std::wstring & userID,  const int & otherChoiceCharacter)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_OtherCharacterSelect;
__msg.Write(__msgid); 
	
__msg << userID;
__msg << otherChoiceCharacter;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_OtherCharacterSelect, (::Proud::RmiID)Rmi_OtherCharacterSelect);
	}
        
	bool Proxy::Player_CMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ,  const float & x,  const float & y,  const float & z,  const float & vx,  const float & vy,  const float & vz,  const float & angle,  const int & animNum)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Player_CMove;
__msg.Write(__msgid); 
	
__msg << x;
__msg << y;
__msg << z;
__msg << vx;
__msg << vy;
__msg << vz;
__msg << angle;
__msg << animNum;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_Player_CMove, (::Proud::RmiID)Rmi_Player_CMove);
	}

	bool Proxy::Player_CMove ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext,  const float & x,  const float & y,  const float & z,  const float & vx,  const float & vy,  const float & vz,  const float & angle,  const int & animNum)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Player_CMove;
__msg.Write(__msgid); 
	
__msg << x;
__msg << y;
__msg << z;
__msg << vx;
__msg << vy;
__msg << vz;
__msg << angle;
__msg << animNum;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_Player_CMove, (::Proud::RmiID)Rmi_Player_CMove);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_ScribblePoint =_PNT("ScribblePoint");
#else
const PNTCHAR* Proxy::RmiName_ScribblePoint =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_OtherCharacterSelect =_PNT("OtherCharacterSelect");
#else
const PNTCHAR* Proxy::RmiName_OtherCharacterSelect =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_Player_CMove =_PNT("Player_CMove");
#else
const PNTCHAR* Proxy::RmiName_Player_CMove =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_ScribblePoint;
}

