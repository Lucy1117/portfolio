  





// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

  
#include "MultiNetwork_stub.h"


const unsigned char sz_MultiNetwork_stub_hRmi[] = 
{ 0x00, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xff, 0x00, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xff,
0xaa, 0xbb, 0xcc, 0xdd, 0xff,0x99, 0xaa, 0xbb, 0xcc, 0x99, 0xaa, 0xdd, 0xff, 0x00 };   

namespace MultiC2S
{
	bool Stub::ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) 
	{
#ifndef __FreeBSD__ 
		{
			// unusable but required. you may ignore it, because it does not occur any worthless load.
			unsigned char x = sz_MultiNetwork_stub_hRmi[0]; 
			x++; 
		}
#endif
		::Proud::HostID remote=pa.GetRemoteHostID();
		if(remote==::Proud::HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		::Proud::CMessage &__msg=pa.GetReadOnlyMessage();
		int orgReadOffset = __msg.GetReadOffset();

		::Proud::RmiID __rmiID;
		if(!__msg.Read(__rmiID))
			goto __fail;
					
		switch((int)__rmiID) // case is to prevent from clang compile error
		{
			case Rmi_RequestServerIn:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					m_core->PostCheckReadMessage(__msg,RmiName_RequestServerIn);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
									
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestServerIn, 
							RmiName_RequestServerIn,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestServerIn, 
							RmiName_RequestServerIn, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestServerIn, 
							RmiName_RequestServerIn, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestServerIn;
						summary.m_rmiName = RmiName_RequestServerIn;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestServerIn (remote,ctx  );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestServerIn);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestServerIn;
						summary.m_rmiName = RmiName_RequestServerIn;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestLogin:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					std::wstring id; __msg >> id;
					std::wstring password; __msg >> password;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestLogin);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,id);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,password);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestLogin, 
							RmiName_RequestLogin,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestLogin, 
							RmiName_RequestLogin, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestLogin, 
							RmiName_RequestLogin, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestLogin;
						summary.m_rmiName = RmiName_RequestLogin;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestLogin (remote,ctx , id, password );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestLogin);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestLogin;
						summary.m_rmiName = RmiName_RequestLogin;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestRoomList:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					m_core->PostCheckReadMessage(__msg,RmiName_RequestRoomList);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
									
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestRoomList, 
							RmiName_RequestRoomList,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestRoomList, 
							RmiName_RequestRoomList, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestRoomList, 
							RmiName_RequestRoomList, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestRoomList;
						summary.m_rmiName = RmiName_RequestRoomList;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestRoomList (remote,ctx  );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestRoomList);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestRoomList;
						summary.m_rmiName = RmiName_RequestRoomList;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestInRoom:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					String roomName; __msg >> roomName;
					bool isNewRoom; __msg >> isNewRoom;
					std::wstring id; __msg >> id;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestInRoom);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,roomName);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,isNewRoom);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,id);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestInRoom, 
							RmiName_RequestInRoom,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestInRoom, 
							RmiName_RequestInRoom, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestInRoom, 
							RmiName_RequestInRoom, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestInRoom;
						summary.m_rmiName = RmiName_RequestInRoom;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestInRoom (remote,ctx , roomName, isNewRoom, id );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestInRoom);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestInRoom;
						summary.m_rmiName = RmiName_RequestInRoom;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestFastRoom:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					std::wstring id; __msg >> id;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestFastRoom);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,id);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestFastRoom, 
							RmiName_RequestFastRoom,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestFastRoom, 
							RmiName_RequestFastRoom, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestFastRoom, 
							RmiName_RequestFastRoom, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestFastRoom;
						summary.m_rmiName = RmiName_RequestFastRoom;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestFastRoom (remote,ctx , id );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestFastRoom);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestFastRoom;
						summary.m_rmiName = RmiName_RequestFastRoom;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestInGame:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					String roomName; __msg >> roomName;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestInGame);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,roomName);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestInGame, 
							RmiName_RequestInGame,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestInGame, 
							RmiName_RequestInGame, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestInGame, 
							RmiName_RequestInGame, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestInGame;
						summary.m_rmiName = RmiName_RequestInGame;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestInGame (remote,ctx , roomName );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestInGame);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestInGame;
						summary.m_rmiName = RmiName_RequestInGame;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_JoinGameScene:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					float x; __msg >> x;
					float y; __msg >> y;
					float z; __msg >> z;
					float angle; __msg >> angle;
					int animNum; __msg >> animNum;
					m_core->PostCheckReadMessage(__msg,RmiName_JoinGameScene);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,x);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,y);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,z);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,angle);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,animNum);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_JoinGameScene, 
							RmiName_JoinGameScene,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_JoinGameScene, 
							RmiName_JoinGameScene, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_JoinGameScene, 
							RmiName_JoinGameScene, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_JoinGameScene;
						summary.m_rmiName = RmiName_JoinGameScene;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = JoinGameScene (remote,ctx , x, y, z, angle, animNum );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_JoinGameScene);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_JoinGameScene;
						summary.m_rmiName = RmiName_JoinGameScene;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_Player_SMove:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					float x; __msg >> x;
					float y; __msg >> y;
					float z; __msg >> z;
					float vx; __msg >> vx;
					float vy; __msg >> vy;
					float vz; __msg >> vz;
					float angle; __msg >> angle;
					int animNum; __msg >> animNum;
					m_core->PostCheckReadMessage(__msg,RmiName_Player_SMove);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,x);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,y);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,z);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,vx);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,vy);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,vz);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,angle);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,animNum);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_Player_SMove, 
							RmiName_Player_SMove,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_Player_SMove, 
							RmiName_Player_SMove, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_Player_SMove, 
							RmiName_Player_SMove, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_Player_SMove;
						summary.m_rmiName = RmiName_Player_SMove;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = Player_SMove (remote,ctx , x, y, z, vx, vy, vz, angle, animNum );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_Player_SMove);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_Player_SMove;
						summary.m_rmiName = RmiName_Player_SMove;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestAddTree:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					D3DXVECTOR3 position; __msg >> position;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestAddTree);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,position);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestAddTree, 
							RmiName_RequestAddTree,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestAddTree, 
							RmiName_RequestAddTree, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestAddTree, 
							RmiName_RequestAddTree, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestAddTree;
						summary.m_rmiName = RmiName_RequestAddTree;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestAddTree (remote,ctx , position );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestAddTree);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestAddTree;
						summary.m_rmiName = RmiName_RequestAddTree;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_RequestRemoveTree:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int treeID; __msg >> treeID;
					m_core->PostCheckReadMessage(__msg,RmiName_RequestRemoveTree);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,treeID);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_RequestRemoveTree, 
							RmiName_RequestRemoveTree,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestRemoveTree, 
							RmiName_RequestRemoveTree, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_RequestRemoveTree, 
							RmiName_RequestRemoveTree, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestRemoveTree;
						summary.m_rmiName = RmiName_RequestRemoveTree;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = RequestRemoveTree (remote,ctx , treeID );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_RequestRemoveTree);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_RequestRemoveTree;
						summary.m_rmiName = RmiName_RequestRemoveTree;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
		default:
			goto __fail;
		}		
		return true;
__fail:
		{
			__msg.SetReadOffset(orgReadOffset);
			return false;
		}
	}
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestServerIn =_PNT("RequestServerIn");
	#else
	const PNTCHAR* Stub::RmiName_RequestServerIn =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestLogin =_PNT("RequestLogin");
	#else
	const PNTCHAR* Stub::RmiName_RequestLogin =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestRoomList =_PNT("RequestRoomList");
	#else
	const PNTCHAR* Stub::RmiName_RequestRoomList =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestInRoom =_PNT("RequestInRoom");
	#else
	const PNTCHAR* Stub::RmiName_RequestInRoom =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestFastRoom =_PNT("RequestFastRoom");
	#else
	const PNTCHAR* Stub::RmiName_RequestFastRoom =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestInGame =_PNT("RequestInGame");
	#else
	const PNTCHAR* Stub::RmiName_RequestInGame =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_JoinGameScene =_PNT("JoinGameScene");
	#else
	const PNTCHAR* Stub::RmiName_JoinGameScene =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_Player_SMove =_PNT("Player_SMove");
	#else
	const PNTCHAR* Stub::RmiName_Player_SMove =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestAddTree =_PNT("RequestAddTree");
	#else
	const PNTCHAR* Stub::RmiName_RequestAddTree =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_RequestRemoveTree =_PNT("RequestRemoveTree");
	#else
	const PNTCHAR* Stub::RmiName_RequestRemoveTree =_PNT("");
	#endif
	const PNTCHAR* Stub::RmiName_First = RmiName_RequestServerIn;
}
namespace MultiS2C
{
	bool Stub::ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) 
	{
#ifndef __FreeBSD__ 
		{
			// unusable but required. you may ignore it, because it does not occur any worthless load.
			unsigned char x = sz_MultiNetwork_stub_hRmi[0]; 
			x++; 
		}
#endif
		::Proud::HostID remote=pa.GetRemoteHostID();
		if(remote==::Proud::HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		::Proud::CMessage &__msg=pa.GetReadOnlyMessage();
		int orgReadOffset = __msg.GetReadOffset();

		::Proud::RmiID __rmiID;
		if(!__msg.Read(__rmiID))
			goto __fail;
					
		switch((int)__rmiID) // case is to prevent from clang compile error
		{
			case Rmi_ReplyServerIn:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					m_core->PostCheckReadMessage(__msg,RmiName_ReplyServerIn);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
									
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_ReplyServerIn, 
							RmiName_ReplyServerIn,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_ReplyServerIn, 
							RmiName_ReplyServerIn, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_ReplyServerIn, 
							RmiName_ReplyServerIn, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_ReplyServerIn;
						summary.m_rmiName = RmiName_ReplyServerIn;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = ReplyServerIn (remote,ctx  );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_ReplyServerIn);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_ReplyServerIn;
						summary.m_rmiName = RmiName_ReplyServerIn;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_ReplyServerFailed:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					std::wstring reason; __msg >> reason;
					m_core->PostCheckReadMessage(__msg,RmiName_ReplyServerFailed);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,reason);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_ReplyServerFailed, 
							RmiName_ReplyServerFailed,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_ReplyServerFailed, 
							RmiName_ReplyServerFailed, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_ReplyServerFailed, 
							RmiName_ReplyServerFailed, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_ReplyServerFailed;
						summary.m_rmiName = RmiName_ReplyServerFailed;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = ReplyServerFailed (remote,ctx , reason );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_ReplyServerFailed);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_ReplyServerFailed;
						summary.m_rmiName = RmiName_ReplyServerFailed;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyLoginSuccess:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyLoginSuccess);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
									
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyLoginSuccess, 
							RmiName_NotifyLoginSuccess,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyLoginSuccess, 
							RmiName_NotifyLoginSuccess, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyLoginSuccess, 
							RmiName_NotifyLoginSuccess, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyLoginSuccess;
						summary.m_rmiName = RmiName_NotifyLoginSuccess;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyLoginSuccess (remote,ctx  );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyLoginSuccess);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyLoginSuccess;
						summary.m_rmiName = RmiName_NotifyLoginSuccess;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyLoginFailed:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					std::wstring reason; __msg >> reason;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyLoginFailed);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,reason);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyLoginFailed, 
							RmiName_NotifyLoginFailed,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyLoginFailed, 
							RmiName_NotifyLoginFailed, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyLoginFailed, 
							RmiName_NotifyLoginFailed, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyLoginFailed;
						summary.m_rmiName = RmiName_NotifyLoginFailed;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyLoginFailed (remote,ctx , reason );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyLoginFailed);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyLoginFailed;
						summary.m_rmiName = RmiName_NotifyLoginFailed;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_ReplyInRoom:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int result; __msg >> result;
					String comment; __msg >> comment;
					int choiceCharacter; __msg >> choiceCharacter;
					m_core->PostCheckReadMessage(__msg,RmiName_ReplyInRoom);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,result);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,comment);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,choiceCharacter);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_ReplyInRoom, 
							RmiName_ReplyInRoom,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_ReplyInRoom, 
							RmiName_ReplyInRoom, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_ReplyInRoom, 
							RmiName_ReplyInRoom, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_ReplyInRoom;
						summary.m_rmiName = RmiName_ReplyInRoom;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = ReplyInRoom (remote,ctx , result, comment, choiceCharacter );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_ReplyInRoom);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_ReplyInRoom;
						summary.m_rmiName = RmiName_ReplyInRoom;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_ReplyInGame:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int result; __msg >> result;
					String comment; __msg >> comment;
					m_core->PostCheckReadMessage(__msg,RmiName_ReplyInGame);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,result);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,comment);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_ReplyInGame, 
							RmiName_ReplyInGame,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_ReplyInGame, 
							RmiName_ReplyInGame, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_ReplyInGame, 
							RmiName_ReplyInGame, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_ReplyInGame;
						summary.m_rmiName = RmiName_ReplyInGame;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = ReplyInGame (remote,ctx , result, comment );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_ReplyInGame);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_ReplyInGame;
						summary.m_rmiName = RmiName_ReplyInGame;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyAddTree:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int treeID; __msg >> treeID;
					D3DXVECTOR3 position; __msg >> position;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyAddTree);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,treeID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,position);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyAddTree, 
							RmiName_NotifyAddTree,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyAddTree, 
							RmiName_NotifyAddTree, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyAddTree, 
							RmiName_NotifyAddTree, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyAddTree;
						summary.m_rmiName = RmiName_NotifyAddTree;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyAddTree (remote,ctx , treeID, position );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyAddTree);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyAddTree;
						summary.m_rmiName = RmiName_NotifyAddTree;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_NotifyRemoveTree:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int treeID; __msg >> treeID;
					m_core->PostCheckReadMessage(__msg,RmiName_NotifyRemoveTree);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,treeID);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_NotifyRemoveTree, 
							RmiName_NotifyRemoveTree,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyRemoveTree, 
							RmiName_NotifyRemoveTree, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_NotifyRemoveTree, 
							RmiName_NotifyRemoveTree, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyRemoveTree;
						summary.m_rmiName = RmiName_NotifyRemoveTree;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = NotifyRemoveTree (remote,ctx , treeID );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_NotifyRemoveTree);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_NotifyRemoveTree;
						summary.m_rmiName = RmiName_NotifyRemoveTree;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_Player_Appear:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int hostID; __msg >> hostID;
					std::wstring userID; __msg >> userID;
					float x; __msg >> x;
					float y; __msg >> y;
					float z; __msg >> z;
					float vx; __msg >> vx;
					float vy; __msg >> vy;
					float vz; __msg >> vz;
					float angle; __msg >> angle;
					int animNum; __msg >> animNum;
					int choiceCharacter; __msg >> choiceCharacter;
					m_core->PostCheckReadMessage(__msg,RmiName_Player_Appear);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,hostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,userID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,x);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,y);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,z);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,vx);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,vy);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,vz);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,angle);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,animNum);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,choiceCharacter);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_Player_Appear, 
							RmiName_Player_Appear,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_Player_Appear, 
							RmiName_Player_Appear, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_Player_Appear, 
							RmiName_Player_Appear, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_Player_Appear;
						summary.m_rmiName = RmiName_Player_Appear;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = Player_Appear (remote,ctx , hostID, userID, x, y, z, vx, vy, vz, angle, animNum, choiceCharacter );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_Player_Appear);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_Player_Appear;
						summary.m_rmiName = RmiName_Player_Appear;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_Player_Disappear:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					int hostID; __msg >> hostID;
					std::wstring userID; __msg >> userID;
					m_core->PostCheckReadMessage(__msg,RmiName_Player_Disappear);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,hostID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,userID);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_Player_Disappear, 
							RmiName_Player_Disappear,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_Player_Disappear, 
							RmiName_Player_Disappear, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_Player_Disappear, 
							RmiName_Player_Disappear, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_Player_Disappear;
						summary.m_rmiName = RmiName_Player_Disappear;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = Player_Disappear (remote,ctx , hostID, userID );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_Player_Disappear);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_Player_Disappear;
						summary.m_rmiName = RmiName_Player_Disappear;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
		default:
			goto __fail;
		}		
		return true;
__fail:
		{
			__msg.SetReadOffset(orgReadOffset);
			return false;
		}
	}
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_ReplyServerIn =_PNT("ReplyServerIn");
	#else
	const PNTCHAR* Stub::RmiName_ReplyServerIn =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_ReplyServerFailed =_PNT("ReplyServerFailed");
	#else
	const PNTCHAR* Stub::RmiName_ReplyServerFailed =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyLoginSuccess =_PNT("NotifyLoginSuccess");
	#else
	const PNTCHAR* Stub::RmiName_NotifyLoginSuccess =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyLoginFailed =_PNT("NotifyLoginFailed");
	#else
	const PNTCHAR* Stub::RmiName_NotifyLoginFailed =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_ReplyInRoom =_PNT("ReplyInRoom");
	#else
	const PNTCHAR* Stub::RmiName_ReplyInRoom =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_ReplyInGame =_PNT("ReplyInGame");
	#else
	const PNTCHAR* Stub::RmiName_ReplyInGame =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyAddTree =_PNT("NotifyAddTree");
	#else
	const PNTCHAR* Stub::RmiName_NotifyAddTree =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_NotifyRemoveTree =_PNT("NotifyRemoveTree");
	#else
	const PNTCHAR* Stub::RmiName_NotifyRemoveTree =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_Player_Appear =_PNT("Player_Appear");
	#else
	const PNTCHAR* Stub::RmiName_Player_Appear =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_Player_Disappear =_PNT("Player_Disappear");
	#else
	const PNTCHAR* Stub::RmiName_Player_Disappear =_PNT("");
	#endif
	const PNTCHAR* Stub::RmiName_First = RmiName_ReplyServerIn;
}
namespace MultiC2C
{
	bool Stub::ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) 
	{
#ifndef __FreeBSD__ 
		{
			// unusable but required. you may ignore it, because it does not occur any worthless load.
			unsigned char x = sz_MultiNetwork_stub_hRmi[0]; 
			x++; 
		}
#endif
		::Proud::HostID remote=pa.GetRemoteHostID();
		if(remote==::Proud::HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		::Proud::CMessage &__msg=pa.GetReadOnlyMessage();
		int orgReadOffset = __msg.GetReadOffset();

		::Proud::RmiID __rmiID;
		if(!__msg.Read(__rmiID))
			goto __fail;
					
		switch((int)__rmiID) // case is to prevent from clang compile error
		{
			case Rmi_ScribblePoint:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					D3DXVECTOR3 point; __msg >> point;
					m_core->PostCheckReadMessage(__msg,RmiName_ScribblePoint);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,point);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_ScribblePoint, 
							RmiName_ScribblePoint,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_ScribblePoint, 
							RmiName_ScribblePoint, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_ScribblePoint, 
							RmiName_ScribblePoint, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_ScribblePoint;
						summary.m_rmiName = RmiName_ScribblePoint;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = ScribblePoint (remote,ctx , point );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_ScribblePoint);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_ScribblePoint;
						summary.m_rmiName = RmiName_ScribblePoint;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_OtherCharacterSelect:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					std::wstring userID; __msg >> userID;
					int otherChoiceCharacter; __msg >> otherChoiceCharacter;
					m_core->PostCheckReadMessage(__msg,RmiName_OtherCharacterSelect);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,userID);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,otherChoiceCharacter);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_OtherCharacterSelect, 
							RmiName_OtherCharacterSelect,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_OtherCharacterSelect, 
							RmiName_OtherCharacterSelect, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_OtherCharacterSelect, 
							RmiName_OtherCharacterSelect, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_OtherCharacterSelect;
						summary.m_rmiName = RmiName_OtherCharacterSelect;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = OtherCharacterSelect (remote,ctx , userID, otherChoiceCharacter );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_OtherCharacterSelect);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_OtherCharacterSelect;
						summary.m_rmiName = RmiName_OtherCharacterSelect;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_Player_CMove:
				{
					::Proud::RmiContext ctx;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
					
					
					float x; __msg >> x;
					float y; __msg >> y;
					float z; __msg >> z;
					float vx; __msg >> vx;
					float vy; __msg >> vy;
					float vz; __msg >> vz;
					float angle; __msg >> angle;
					int animNum; __msg >> animNum;
					m_core->PostCheckReadMessage(__msg,RmiName_Player_CMove);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,x);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,y);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,z);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,vx);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,vy);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,vz);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,angle);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,animNum);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_Player_CMove, 
							RmiName_Player_CMove,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_Player_CMove, 
							RmiName_Player_CMove, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_Player_CMove, 
							RmiName_Player_CMove, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_Player_CMove;
						summary.m_rmiName = RmiName_Player_CMove;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = Player_CMove (remote,ctx , x, y, z, vx, vy, vz, angle, animNum );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_Player_CMove);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_Player_CMove;
						summary.m_rmiName = RmiName_Player_CMove;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
		default:
			goto __fail;
		}		
		return true;
__fail:
		{
			__msg.SetReadOffset(orgReadOffset);
			return false;
		}
	}
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_ScribblePoint =_PNT("ScribblePoint");
	#else
	const PNTCHAR* Stub::RmiName_ScribblePoint =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_OtherCharacterSelect =_PNT("OtherCharacterSelect");
	#else
	const PNTCHAR* Stub::RmiName_OtherCharacterSelect =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_Player_CMove =_PNT("Player_CMove");
	#else
	const PNTCHAR* Stub::RmiName_Player_CMove =_PNT("");
	#endif
	const PNTCHAR* Stub::RmiName_First = RmiName_ScribblePoint;
}

