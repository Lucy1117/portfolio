




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;	     

namespace MultiC2S
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool RequestServerInDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public RequestServerInDelegate RequestServerIn = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool RequestLoginDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String id, System.String password);  
		public RequestLoginDelegate RequestLogin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String id, System.String password)
		{ 
			return false;
		};
		public delegate bool RequestRoomListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public RequestRoomListDelegate RequestRoomList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool RequestInRoomDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String roomName, bool isNewRoom, System.String id);  
		public RequestInRoomDelegate RequestInRoom = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String roomName, bool isNewRoom, System.String id)
		{ 
			return false;
		};
		public delegate bool RequestFastRoomDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String id);  
		public RequestFastRoomDelegate RequestFastRoom = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String id)
		{ 
			return false;
		};
		public delegate bool RequestInGameDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String roomName);  
		public RequestInGameDelegate RequestInGame = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, String roomName)
		{ 
			return false;
		};
		public delegate bool JoinGameSceneDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, float x, float y, float z, float angle, int animNum);  
		public JoinGameSceneDelegate JoinGameScene = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, float x, float y, float z, float angle, int animNum)
		{ 
			return false;
		};
		public delegate bool Player_SMoveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, float x, float y, float z, float vx, float vy, float vz, float angle, int animNum);  
		public Player_SMoveDelegate Player_SMove = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, float x, float y, float z, float vx, float vy, float vz, float angle, int animNum)
		{ 
			return false;
		};
		public delegate bool RequestAddTreeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, UnityEngine.Vector3 position);  
		public RequestAddTreeDelegate RequestAddTree = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, UnityEngine.Vector3 position)
		{ 
			return false;
		};
		public delegate bool RequestRemoveTreeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int treeID);  
		public RequestRemoveTreeDelegate RequestRemoveTree = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int treeID)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
case Common.RequestServerIn:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		core.PostCheckReadMessage(__msg, RmiName_RequestServerIn);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
						NotifyCallFromStub(Common.RequestServerIn, RmiName_RequestServerIn,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestServerIn;
			summary.rmiName = RmiName_RequestServerIn;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestServerIn (remote,ctx  );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestServerIn);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestServerIn;
			summary.rmiName = RmiName_RequestServerIn;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestLogin:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		System.String id; AmgClient.Marshaler.Read(__msg,out id);	
System.String password; AmgClient.Marshaler.Read(__msg,out password);	
core.PostCheckReadMessage(__msg, RmiName_RequestLogin);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=id.ToString()+",";
parameterString+=password.ToString()+",";
			NotifyCallFromStub(Common.RequestLogin, RmiName_RequestLogin,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestLogin;
			summary.rmiName = RmiName_RequestLogin;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestLogin (remote,ctx , id, password );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestLogin);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestLogin;
			summary.rmiName = RmiName_RequestLogin;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestRoomList:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		core.PostCheckReadMessage(__msg, RmiName_RequestRoomList);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
						NotifyCallFromStub(Common.RequestRoomList, RmiName_RequestRoomList,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestRoomList;
			summary.rmiName = RmiName_RequestRoomList;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestRoomList (remote,ctx  );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestRoomList);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestRoomList;
			summary.rmiName = RmiName_RequestRoomList;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestInRoom:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		String roomName; AmgClient.Marshaler.Read(__msg,out roomName);	
bool isNewRoom; AmgClient.Marshaler.Read(__msg,out isNewRoom);	
System.String id; AmgClient.Marshaler.Read(__msg,out id);	
core.PostCheckReadMessage(__msg, RmiName_RequestInRoom);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=roomName.ToString()+",";
parameterString+=isNewRoom.ToString()+",";
parameterString+=id.ToString()+",";
			NotifyCallFromStub(Common.RequestInRoom, RmiName_RequestInRoom,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestInRoom;
			summary.rmiName = RmiName_RequestInRoom;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestInRoom (remote,ctx , roomName, isNewRoom, id );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestInRoom);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestInRoom;
			summary.rmiName = RmiName_RequestInRoom;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestFastRoom:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		System.String id; AmgClient.Marshaler.Read(__msg,out id);	
core.PostCheckReadMessage(__msg, RmiName_RequestFastRoom);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=id.ToString()+",";
			NotifyCallFromStub(Common.RequestFastRoom, RmiName_RequestFastRoom,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestFastRoom;
			summary.rmiName = RmiName_RequestFastRoom;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestFastRoom (remote,ctx , id );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestFastRoom);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestFastRoom;
			summary.rmiName = RmiName_RequestFastRoom;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestInGame:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		String roomName; AmgClient.Marshaler.Read(__msg,out roomName);	
core.PostCheckReadMessage(__msg, RmiName_RequestInGame);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=roomName.ToString()+",";
			NotifyCallFromStub(Common.RequestInGame, RmiName_RequestInGame,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestInGame;
			summary.rmiName = RmiName_RequestInGame;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestInGame (remote,ctx , roomName );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestInGame);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestInGame;
			summary.rmiName = RmiName_RequestInGame;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.JoinGameScene:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		float x; AmgClient.Marshaler.Read(__msg,out x);	
float y; AmgClient.Marshaler.Read(__msg,out y);	
float z; AmgClient.Marshaler.Read(__msg,out z);	
float angle; AmgClient.Marshaler.Read(__msg,out angle);	
int animNum; AmgClient.Marshaler.Read(__msg,out animNum);	
core.PostCheckReadMessage(__msg, RmiName_JoinGameScene);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=x.ToString()+",";
parameterString+=y.ToString()+",";
parameterString+=z.ToString()+",";
parameterString+=angle.ToString()+",";
parameterString+=animNum.ToString()+",";
			NotifyCallFromStub(Common.JoinGameScene, RmiName_JoinGameScene,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.JoinGameScene;
			summary.rmiName = RmiName_JoinGameScene;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=JoinGameScene (remote,ctx , x, y, z, angle, animNum );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_JoinGameScene);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.JoinGameScene;
			summary.rmiName = RmiName_JoinGameScene;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.Player_SMove:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		float x; AmgClient.Marshaler.Read(__msg,out x);	
float y; AmgClient.Marshaler.Read(__msg,out y);	
float z; AmgClient.Marshaler.Read(__msg,out z);	
float vx; AmgClient.Marshaler.Read(__msg,out vx);	
float vy; AmgClient.Marshaler.Read(__msg,out vy);	
float vz; AmgClient.Marshaler.Read(__msg,out vz);	
float angle; AmgClient.Marshaler.Read(__msg,out angle);	
int animNum; AmgClient.Marshaler.Read(__msg,out animNum);	
core.PostCheckReadMessage(__msg, RmiName_Player_SMove);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=x.ToString()+",";
parameterString+=y.ToString()+",";
parameterString+=z.ToString()+",";
parameterString+=vx.ToString()+",";
parameterString+=vy.ToString()+",";
parameterString+=vz.ToString()+",";
parameterString+=angle.ToString()+",";
parameterString+=animNum.ToString()+",";
			NotifyCallFromStub(Common.Player_SMove, RmiName_Player_SMove,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.Player_SMove;
			summary.rmiName = RmiName_Player_SMove;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=Player_SMove (remote,ctx , x, y, z, vx, vy, vz, angle, animNum );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_Player_SMove);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.Player_SMove;
			summary.rmiName = RmiName_Player_SMove;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestAddTree:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		UnityEngine.Vector3 position; AmgClient.Marshaler.Read(__msg,out position);	
core.PostCheckReadMessage(__msg, RmiName_RequestAddTree);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=position.ToString()+",";
			NotifyCallFromStub(Common.RequestAddTree, RmiName_RequestAddTree,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestAddTree;
			summary.rmiName = RmiName_RequestAddTree;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestAddTree (remote,ctx , position );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestAddTree);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestAddTree;
			summary.rmiName = RmiName_RequestAddTree;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RequestRemoveTree:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int treeID; AmgClient.Marshaler.Read(__msg,out treeID);	
core.PostCheckReadMessage(__msg, RmiName_RequestRemoveTree);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=treeID.ToString()+",";
			NotifyCallFromStub(Common.RequestRemoveTree, RmiName_RequestRemoveTree,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RequestRemoveTree;
			summary.rmiName = RmiName_RequestRemoveTree;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RequestRemoveTree (remote,ctx , treeID );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RequestRemoveTree);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RequestRemoveTree;
			summary.rmiName = RmiName_RequestRemoveTree;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
const string RmiName_RequestServerIn="RequestServerIn";
const string RmiName_RequestLogin="RequestLogin";
const string RmiName_RequestRoomList="RequestRoomList";
const string RmiName_RequestInRoom="RequestInRoom";
const string RmiName_RequestFastRoom="RequestFastRoom";
const string RmiName_RequestInGame="RequestInGame";
const string RmiName_JoinGameScene="JoinGameScene";
const string RmiName_Player_SMove="Player_SMove";
const string RmiName_RequestAddTree="RequestAddTree";
const string RmiName_RequestRemoveTree="RequestRemoveTree";
       
const string RmiName_First = RmiName_RequestServerIn;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
const string RmiName_RequestServerIn="";
const string RmiName_RequestLogin="";
const string RmiName_RequestRoomList="";
const string RmiName_RequestInRoom="";
const string RmiName_RequestFastRoom="";
const string RmiName_RequestInGame="";
const string RmiName_JoinGameScene="";
const string RmiName_Player_SMove="";
const string RmiName_RequestAddTree="";
const string RmiName_RequestRemoveTree="";
       
const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}
namespace MultiS2C
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool ReplyServerInDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ReplyServerInDelegate ReplyServerIn = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool ReplyServerFailedDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String reason);  
		public ReplyServerFailedDelegate ReplyServerFailed = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String reason)
		{ 
			return false;
		};
		public delegate bool NotifyLoginSuccessDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public NotifyLoginSuccessDelegate NotifyLoginSuccess = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool NotifyLoginFailedDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String reason);  
		public NotifyLoginFailedDelegate NotifyLoginFailed = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String reason)
		{ 
			return false;
		};
		public delegate bool ReplyInRoomDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int result, String comment, int choiceCharacter);  
		public ReplyInRoomDelegate ReplyInRoom = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int result, String comment, int choiceCharacter)
		{ 
			return false;
		};
		public delegate bool ReplyInGameDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int result, String comment);  
		public ReplyInGameDelegate ReplyInGame = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int result, String comment)
		{ 
			return false;
		};
		public delegate bool NotifyAddTreeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int treeID, UnityEngine.Vector3 position);  
		public NotifyAddTreeDelegate NotifyAddTree = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int treeID, UnityEngine.Vector3 position)
		{ 
			return false;
		};
		public delegate bool NotifyRemoveTreeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int treeID);  
		public NotifyRemoveTreeDelegate NotifyRemoveTree = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int treeID)
		{ 
			return false;
		};
		public delegate bool Player_AppearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, System.String userID, float x, float y, float z, float vx, float vy, float vz, float angle, int animNum, int choiceCharacter);  
		public Player_AppearDelegate Player_Appear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, System.String userID, float x, float y, float z, float vx, float vy, float vz, float angle, int animNum, int choiceCharacter)
		{ 
			return false;
		};
		public delegate bool Player_DisappearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, System.String userID);  
		public Player_DisappearDelegate Player_Disappear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, System.String userID)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
case Common.ReplyServerIn:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		core.PostCheckReadMessage(__msg, RmiName_ReplyServerIn);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
						NotifyCallFromStub(Common.ReplyServerIn, RmiName_ReplyServerIn,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.ReplyServerIn;
			summary.rmiName = RmiName_ReplyServerIn;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=ReplyServerIn (remote,ctx  );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_ReplyServerIn);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.ReplyServerIn;
			summary.rmiName = RmiName_ReplyServerIn;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.ReplyServerFailed:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		System.String reason; AmgClient.Marshaler.Read(__msg,out reason);	
core.PostCheckReadMessage(__msg, RmiName_ReplyServerFailed);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=reason.ToString()+",";
			NotifyCallFromStub(Common.ReplyServerFailed, RmiName_ReplyServerFailed,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.ReplyServerFailed;
			summary.rmiName = RmiName_ReplyServerFailed;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=ReplyServerFailed (remote,ctx , reason );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_ReplyServerFailed);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.ReplyServerFailed;
			summary.rmiName = RmiName_ReplyServerFailed;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyLoginSuccess:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		core.PostCheckReadMessage(__msg, RmiName_NotifyLoginSuccess);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
						NotifyCallFromStub(Common.NotifyLoginSuccess, RmiName_NotifyLoginSuccess,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyLoginSuccess;
			summary.rmiName = RmiName_NotifyLoginSuccess;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyLoginSuccess (remote,ctx  );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyLoginSuccess);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyLoginSuccess;
			summary.rmiName = RmiName_NotifyLoginSuccess;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyLoginFailed:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		System.String reason; AmgClient.Marshaler.Read(__msg,out reason);	
core.PostCheckReadMessage(__msg, RmiName_NotifyLoginFailed);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=reason.ToString()+",";
			NotifyCallFromStub(Common.NotifyLoginFailed, RmiName_NotifyLoginFailed,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyLoginFailed;
			summary.rmiName = RmiName_NotifyLoginFailed;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyLoginFailed (remote,ctx , reason );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyLoginFailed);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyLoginFailed;
			summary.rmiName = RmiName_NotifyLoginFailed;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.ReplyInRoom:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int result; AmgClient.Marshaler.Read(__msg,out result);	
String comment; AmgClient.Marshaler.Read(__msg,out comment);	
int choiceCharacter; AmgClient.Marshaler.Read(__msg,out choiceCharacter);	
core.PostCheckReadMessage(__msg, RmiName_ReplyInRoom);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=result.ToString()+",";
parameterString+=comment.ToString()+",";
parameterString+=choiceCharacter.ToString()+",";
			NotifyCallFromStub(Common.ReplyInRoom, RmiName_ReplyInRoom,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.ReplyInRoom;
			summary.rmiName = RmiName_ReplyInRoom;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=ReplyInRoom (remote,ctx , result, comment, choiceCharacter );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_ReplyInRoom);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.ReplyInRoom;
			summary.rmiName = RmiName_ReplyInRoom;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.ReplyInGame:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int result; AmgClient.Marshaler.Read(__msg,out result);	
String comment; AmgClient.Marshaler.Read(__msg,out comment);	
core.PostCheckReadMessage(__msg, RmiName_ReplyInGame);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=result.ToString()+",";
parameterString+=comment.ToString()+",";
			NotifyCallFromStub(Common.ReplyInGame, RmiName_ReplyInGame,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.ReplyInGame;
			summary.rmiName = RmiName_ReplyInGame;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=ReplyInGame (remote,ctx , result, comment );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_ReplyInGame);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.ReplyInGame;
			summary.rmiName = RmiName_ReplyInGame;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyAddTree:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int treeID; AmgClient.Marshaler.Read(__msg,out treeID);	
UnityEngine.Vector3 position; AmgClient.Marshaler.Read(__msg,out position);	
core.PostCheckReadMessage(__msg, RmiName_NotifyAddTree);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=treeID.ToString()+",";
parameterString+=position.ToString()+",";
			NotifyCallFromStub(Common.NotifyAddTree, RmiName_NotifyAddTree,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyAddTree;
			summary.rmiName = RmiName_NotifyAddTree;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyAddTree (remote,ctx , treeID, position );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyAddTree);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyAddTree;
			summary.rmiName = RmiName_NotifyAddTree;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.NotifyRemoveTree:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int treeID; AmgClient.Marshaler.Read(__msg,out treeID);	
core.PostCheckReadMessage(__msg, RmiName_NotifyRemoveTree);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=treeID.ToString()+",";
			NotifyCallFromStub(Common.NotifyRemoveTree, RmiName_NotifyRemoveTree,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.NotifyRemoveTree;
			summary.rmiName = RmiName_NotifyRemoveTree;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=NotifyRemoveTree (remote,ctx , treeID );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_NotifyRemoveTree);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.NotifyRemoveTree;
			summary.rmiName = RmiName_NotifyRemoveTree;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.Player_Appear:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int hostID; AmgClient.Marshaler.Read(__msg,out hostID);	
System.String userID; AmgClient.Marshaler.Read(__msg,out userID);	
float x; AmgClient.Marshaler.Read(__msg,out x);	
float y; AmgClient.Marshaler.Read(__msg,out y);	
float z; AmgClient.Marshaler.Read(__msg,out z);	
float vx; AmgClient.Marshaler.Read(__msg,out vx);	
float vy; AmgClient.Marshaler.Read(__msg,out vy);	
float vz; AmgClient.Marshaler.Read(__msg,out vz);	
float angle; AmgClient.Marshaler.Read(__msg,out angle);	
int animNum; AmgClient.Marshaler.Read(__msg,out animNum);	
int choiceCharacter; AmgClient.Marshaler.Read(__msg,out choiceCharacter);	
core.PostCheckReadMessage(__msg, RmiName_Player_Appear);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=hostID.ToString()+",";
parameterString+=userID.ToString()+",";
parameterString+=x.ToString()+",";
parameterString+=y.ToString()+",";
parameterString+=z.ToString()+",";
parameterString+=vx.ToString()+",";
parameterString+=vy.ToString()+",";
parameterString+=vz.ToString()+",";
parameterString+=angle.ToString()+",";
parameterString+=animNum.ToString()+",";
parameterString+=choiceCharacter.ToString()+",";
			NotifyCallFromStub(Common.Player_Appear, RmiName_Player_Appear,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.Player_Appear;
			summary.rmiName = RmiName_Player_Appear;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=Player_Appear (remote,ctx , hostID, userID, x, y, z, vx, vy, vz, angle, animNum, choiceCharacter );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_Player_Appear);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.Player_Appear;
			summary.rmiName = RmiName_Player_Appear;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.Player_Disappear:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int hostID; AmgClient.Marshaler.Read(__msg,out hostID);	
System.String userID; AmgClient.Marshaler.Read(__msg,out userID);	
core.PostCheckReadMessage(__msg, RmiName_Player_Disappear);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=hostID.ToString()+",";
parameterString+=userID.ToString()+",";
			NotifyCallFromStub(Common.Player_Disappear, RmiName_Player_Disappear,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.Player_Disappear;
			summary.rmiName = RmiName_Player_Disappear;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=Player_Disappear (remote,ctx , hostID, userID );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_Player_Disappear);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.Player_Disappear;
			summary.rmiName = RmiName_Player_Disappear;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
const string RmiName_ReplyServerIn="ReplyServerIn";
const string RmiName_ReplyServerFailed="ReplyServerFailed";
const string RmiName_NotifyLoginSuccess="NotifyLoginSuccess";
const string RmiName_NotifyLoginFailed="NotifyLoginFailed";
const string RmiName_ReplyInRoom="ReplyInRoom";
const string RmiName_ReplyInGame="ReplyInGame";
const string RmiName_NotifyAddTree="NotifyAddTree";
const string RmiName_NotifyRemoveTree="NotifyRemoveTree";
const string RmiName_Player_Appear="Player_Appear";
const string RmiName_Player_Disappear="Player_Disappear";
       
const string RmiName_First = RmiName_ReplyServerIn;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
const string RmiName_ReplyServerIn="";
const string RmiName_ReplyServerFailed="";
const string RmiName_NotifyLoginSuccess="";
const string RmiName_NotifyLoginFailed="";
const string RmiName_ReplyInRoom="";
const string RmiName_ReplyInGame="";
const string RmiName_NotifyAddTree="";
const string RmiName_NotifyRemoveTree="";
const string RmiName_Player_Appear="";
const string RmiName_Player_Disappear="";
       
const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}
namespace MultiC2C
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool ScribblePointDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, UnityEngine.Vector3 point);  
		public ScribblePointDelegate ScribblePoint = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, UnityEngine.Vector3 point)
		{ 
			return false;
		};
		public delegate bool OtherCharacterSelectDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String userID, int otherChoiceCharacter);  
		public OtherCharacterSelectDelegate OtherCharacterSelect = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String userID, int otherChoiceCharacter)
		{ 
			return false;
		};
		public delegate bool Player_CMoveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, float x, float y, float z, float vx, float vy, float vz, float angle, int animNum);  
		public Player_CMoveDelegate Player_CMove = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, float x, float y, float z, float vx, float vy, float vz, float angle, int animNum)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
case Common.ScribblePoint:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		UnityEngine.Vector3 point; AmgClient.Marshaler.Read(__msg,out point);	
core.PostCheckReadMessage(__msg, RmiName_ScribblePoint);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=point.ToString()+",";
			NotifyCallFromStub(Common.ScribblePoint, RmiName_ScribblePoint,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.ScribblePoint;
			summary.rmiName = RmiName_ScribblePoint;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=ScribblePoint (remote,ctx , point );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_ScribblePoint);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.ScribblePoint;
			summary.rmiName = RmiName_ScribblePoint;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.OtherCharacterSelect:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		System.String userID; AmgClient.Marshaler.Read(__msg,out userID);	
int otherChoiceCharacter; AmgClient.Marshaler.Read(__msg,out otherChoiceCharacter);	
core.PostCheckReadMessage(__msg, RmiName_OtherCharacterSelect);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=userID.ToString()+",";
parameterString+=otherChoiceCharacter.ToString()+",";
			NotifyCallFromStub(Common.OtherCharacterSelect, RmiName_OtherCharacterSelect,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.OtherCharacterSelect;
			summary.rmiName = RmiName_OtherCharacterSelect;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=OtherCharacterSelect (remote,ctx , userID, otherChoiceCharacter );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_OtherCharacterSelect);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.OtherCharacterSelect;
			summary.rmiName = RmiName_OtherCharacterSelect;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.Player_CMove:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		float x; AmgClient.Marshaler.Read(__msg,out x);	
float y; AmgClient.Marshaler.Read(__msg,out y);	
float z; AmgClient.Marshaler.Read(__msg,out z);	
float vx; AmgClient.Marshaler.Read(__msg,out vx);	
float vy; AmgClient.Marshaler.Read(__msg,out vy);	
float vz; AmgClient.Marshaler.Read(__msg,out vz);	
float angle; AmgClient.Marshaler.Read(__msg,out angle);	
int animNum; AmgClient.Marshaler.Read(__msg,out animNum);	
core.PostCheckReadMessage(__msg, RmiName_Player_CMove);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=x.ToString()+",";
parameterString+=y.ToString()+",";
parameterString+=z.ToString()+",";
parameterString+=vx.ToString()+",";
parameterString+=vy.ToString()+",";
parameterString+=vz.ToString()+",";
parameterString+=angle.ToString()+",";
parameterString+=animNum.ToString()+",";
			NotifyCallFromStub(Common.Player_CMove, RmiName_Player_CMove,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.Player_CMove;
			summary.rmiName = RmiName_Player_CMove;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=Player_CMove (remote,ctx , x, y, z, vx, vy, vz, angle, animNum );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_Player_CMove);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.Player_CMove;
			summary.rmiName = RmiName_Player_CMove;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
const string RmiName_ScribblePoint="ScribblePoint";
const string RmiName_OtherCharacterSelect="OtherCharacterSelect";
const string RmiName_Player_CMove="Player_CMove";
       
const string RmiName_First = RmiName_ScribblePoint;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
const string RmiName_ScribblePoint="";
const string RmiName_OtherCharacterSelect="";
const string RmiName_Player_CMove="";
       
const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}

